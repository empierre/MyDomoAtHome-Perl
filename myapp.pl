
# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Domo.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DOMO';
  package Domo;
  # This program is free software; you can redistribute it and/or
  # modify it under the terms of the GNU General Public License
  # version 2 as published by the Free Software Foundation.
  # Author: epierre <epierre@e-nef.com>
  
  use Dancer ':syntax';
  use File::Slurp;
  use File::Spec;
  use LWP::UserAgent;
  use Crypt::SSLeay;
  use utf8;
  use Encode qw/ encode decode /;
  use Time::Piece;
  use DateTime;
  use feature     qw< unicode_strings >;
  use POSIX qw(ceil);
  #use JSON;
  use warnings;
  use strict;
  use Audio::MPD;
  
  
  our $VERSION = '0.12';
  set warnings => 0;
  my %device_tab;
  my %device_list;
  my $last_version;    #last version in github
  my $last_version_dt; # last version text in github
  
  
  hook(
     after_serializer => sub {
         my $response = shift;
         $response->{encoded} = 1;
     }
  );
  
  set serializer => 'JSON'; 
  set 'database'     => File::Spec->catfile( config->{domo_db});
  prefix undef;
  
  my $mpd_host=config->{volumio_path};
  my $mpd;
  
  get '/' => sub {
      template 'index';
  };
  
  get '/rooms' => sub {
         #Room list
    return {"rooms" => [ 
  		{ "id"=> "Switches", "name"=> "Switches" },
  		{ "id"=> "Scenes", "name"=> "Scenes" },
  		{ "id"=> "Temp", "name"=> "Weather" },
  		{ "id"=> "Utility", "name"=> "Utility" },
  #		{ "id"=> "Volumio", "name"=> "Volumio" },
  			]};
  };
  
  get '/system' => sub {
   return {"id"=> "MyDomoAtHome","apiversion"=> 1};
  };
  
  get '/devices/:deviceId/:paramKey/histo/:startdate/:enddate' => sub {
  	my $deviceId = params->{deviceId};
  	my $paramKey = params->{paramKey}||"";
  	my $startdate = params->{startdate}||"";
  	my $enddate = params->{enddate}||"";
  
  	my $type=lc(&getDeviceType($deviceId));
  	my $ptype=$type;
  debug("TYPE:$type\n");
  	if (($type eq "lux")||($type eq "energy")) {$type="counter";}
  	if ($type eq "air quality") {$type="counter";}
  	if (($ptype eq "general")) {$type="Percentage";}
  	if (($paramKey eq "hygro")) {$type="temp";}
  	if (($paramKey eq "temp")) {$type="temp";}
  
  	my $feed={ "values" => []};
  	my $url=config->{domo_path}."/json.htm?type=graph&sensor=$type&idx=$deviceId&range=day";
  	my $decoded;
  	my @results=();
  debug($url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			my $f={};
  			foreach $f ( @results ) {
  					my $dt = Time::Piece->strptime($f->{"d"},"%Y-%m-%d %H:%M:%SS");
  					#print $dt->epoch." \n";
  					if ((($paramKey eq "temp")&&($f->{"te"}))||($type eq "temp")) {
  							my $value=$f->{"te"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ((($paramKey eq "hygro")&&($f->{"hu"}))||($type eq "Humidity")) {
  							my $value=$f->{"hu"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif (($ptype eq "air quality")) {
  							my $value=$f->{"co2"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif (($type eq "counter")||($type eq "Percentage")) {
  							my $value=$f->{"v"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"mm"}) {
  						my $value=$f->{"mm"};
  						my $date=$dt->epoch*1000;
  						my $feeds={"date" => "$date", "value" => "$value"};
  						push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"uvi"}) {
  						my $value=$f->{"uvi"};
  						my $date=$dt->epoch*1000;
  						my $feeds={"date" => "$date", "value" => "$value"};
  						push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"v"}) {
  						my $value=$f->{"v"};
  						my $date=$dt->epoch*1000;
  						my $feeds={"date" => "$date", "value" => "$value"};
  						push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"sp"}) {
  						my $value=$f->{"sp"};
  						my $date=$dt->epoch*1000;
  						my $feeds={"date" => "$date", "value" => "$value"};
  						push (@{$feed->{'values'}}, $feeds );
  					}
  					#di direction
  					#gu gust
  					#v counter percentage
  					#
  				}
  			return to_json($feed, { utf8 => 1} );
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false};
  		}
  	} else {
  		status 'error';
  		return { success => false};
  	}
  };
  
  get '/devices/:deviceId/action/:actionName/?:actionParam?' => sub {
  my $deviceId = params->{deviceId};
  my $actionName = params->{actionName};
  my $actionParam = params->{actionParam}||"";
  
  if ($actionName eq 'setStatus') {
  debug("actionParam=".$actionParam."\n");
          #setStatus	0/1
  	my $action;
  	if ($actionParam) {
  		$action="On";
  	} else {
  		$action="Off";
  	}
  	my $url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=$action&level=0&passcode=";
  debug($url);
  	my $browser = LWP::UserAgent->new;
  	my $response = $browser->get($url);
  	if ($response->is_success){ 
  		return { success => true};
  	} else {
  		status 'error';
  		return { success => false, errormsg => $response->status_line};
  	}
  } elsif ($actionName eq 'setArmed') {
  	#setArmed	0/1
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
  } elsif ($actionName eq 'setAck') {
  	#setAck	
  		my $url=config->{domo_path}."/json.htm?type=command&param=resetsecuritystatus&idx=$deviceId&switchcmd=Normal";
  	debug($url);
  		my $browser = LWP::UserAgent->new;
  		my $response = $browser->get($url);
  		if ($response->is_success){ 
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false, errormsg => $response->status_line};
  		}
  } elsif ($actionName eq 'setLevel') {
  	#/json.htm?type=command&param=switchlight&idx=&switchcmd=Set%20Level&level=6
  	my $url;
  	if (($device_tab{$deviceId}->{"Action"}==2)or($device_tab{$deviceId}->{"Action"}==3)) {
  		if ($actionParam eq "100") {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=$actionParam&passcode=";
  		} else {
  			my $setLevel=ceil($actionParam*$device_tab{$deviceId}->{"MaxDimLevel"}/100);
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$setLevel&passcode=";
  		}
  	} elsif (($device_tab{$deviceId}->{"Action"}==5)) {
  		#Blinds inverted
  		if ($actionParam eq "100") {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=0&passcode=";
  		} else {
  			my $setLevel=ceil($actionParam*$device_tab{$deviceId}->{"MaxDimLevel"}/100);
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$setLevel&passcode=";
  		}
  	} elsif (($device_tab{$deviceId}->{"Action"}==6)) {
  		#Blinds -> On for Closed, Off for Open 
  		if ($actionParam eq "100") {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=0&passcode=";
  		} else {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=0&passcode=";
  		}
  	} else {
  		if ($actionParam eq "1") {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$actionParam&passcode=";
  		} elsif ($actionParam eq "0") {
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=$actionParam&passcode=";
  
  		} else {
  			my $setLevel=ceil($actionParam*$device_tab{$deviceId}->{"MaxDimLevel"}/100);
  			$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Set%20Level&level=$setLevel&passcode=";
  		}
  	}
  
  	debug($url);
  		my $browser = LWP::UserAgent->new;
  		my $response = $browser->get($url);
  		if ($response->is_success){ 
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false, errormsg => $response->status_line};
  		}
  	} elsif ($actionName eq 'stopShutter') {
  		#stopShutter (Venetian store)
  		my $url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Stop&level=0&passcode=";
  debug($url);
  		my $browser = LWP::UserAgent->new;
  		my $response = $browser->get($url);
  		if ($response->is_success){ 
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false, errormsg => $response->status_line};
  		}
  		return { success => true};
  	} elsif ($actionName eq 'pulseShutter') {
  		#pulseShutter	up/down
  		status 'error';
  		return { success => false, errormsg => "not implemented"};
  	} elsif ($actionName eq 'setSetPoint') {
  		#DevThermostat
  		my $url=config->{domo_path}."/json.htm?type=setused&idx=$deviceId&used=true&setpoint=$actionParam";
  debug($url);
  		my $browser = LWP::UserAgent->new;
  		my $response = $browser->get($url);
  		if ($response->is_success){ 
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false, errormsg => $response->status_line};
  		}
  		return { success => true};
  	} elsif ($actionName eq 'launchScene') {
  		#launchScene
  		#/json.htm?type=command&param=switchscene&idx=&switchcmd=
  		my $url=config->{domo_path}."/json.htm?type=command&param=switchscene&idx=$deviceId&switchcmd=On&passcode=";
  	debug($url);
  		my $browser = LWP::UserAgent->new;
  		my $response = $browser->get($url);
  		if ($response->is_success){ 
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false, errormsg => $response->status_line};
  		}
  		return { success => true};
  	} elsif ($actionName eq 'setColor') {
  			my $url=config->{domo_path}."/json.htm?type=command&param=setcolorbrightnessvalue&idx=$deviceId&passcode=";
  		debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  	} elsif ($actionName eq 'setChoice') {
  		if ($deviceId=~/^S/) {
  			my ($sc)=$deviceId=~/S(\d+)/;
  			my $url=config->{domo_path}."/json.htm?type=command&param=switchscene&idx=$sc&switchcmd=$actionParam&passcode=";
  		debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  		} elsif ($deviceId=~/^V/) {
  			my ($sc)=$deviceId=~/V(\d+)/;
  			if ($actionParam eq "play") {
  				$mpd->play;
  			}elsif ($actionParam eq "pause") {
  				$mpd->pause;
  			}elsif ($actionParam eq "stop") {
  				$mpd->stop;
  			}elsif ($actionParam eq "next") {
  				$mpd->next;
  			}elsif ($actionParam eq "prev") {
  				$mpd->next;
  			}elsif ($actionParam eq "volumeUP") {
  				$mpd->volume("+1");
  			}elsif ($actionParam eq "volumeDOWN") {
  				$mpd->volume("-1");
  			}
  		} else {
  			status 'error';
  			return { success => false, errormsg => "not implemented"};
  		}
  	} elsif ($actionName eq 'setMode') {
  		#setChoice string
  		status 'error';
  		return { success => false, errormsg => "not implemented"};
      } else {
          status 'not_found';
          return "What?";
     }
  };
  
  get '/devices' => sub {
  	my $feed={ "devices" => []};
  	my $t_unit="°C";
  	my $system_url = config->{domo_path}."/json.htm?type=devices&filter=all&used=true&order=Name";
  	my $decoded;
  	my @results;
  	my @unk_dev;         # list of unknown devices
  debug($system_url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $system_url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			#Own device version
  			my $feeds={"id" => "S0", "name" => "MyDomoAtHome", "type" => "DevGenericSensor",  params =>[]};
  			my $ver="$VERSION";
  			push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$ver", "unit"=> "", "graphable" => "false"} );
  			push (@{$feed->{'devices'}}, $feeds );
  			#Check for new version
  			my @and=&getLastVersion();
  			my $an1;my $an2;
  			if (($ver ne $and[0])&&($and[0] ne "err")) {
  				my $feeds={"id" => "S1", "name" => "New version found", "type" => "DevGenericSensor",  params =>[]};
  				$an1=$and[0];
  				push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$an1", "unit"=> "", "graphable" => "false"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			}
  			#
  			#Parse the devices tree
  			#
  			foreach my $f ( @results ) {
  					my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  					my $name=$f->{"Name"};
  					#$name=~s/\s/_/;
  					#$name=~s/\s/_/;
  					#$name=~s/\//_/; 
  					$name=~s/%/P/;
  				 if ($f->{"SwitchType"}) {			
  					#print $f->{"idx"} . " " . $f->{"Name"} . " " . $f->{"Status"} . $f->{"LastUpdate"}."\n";
  					#$name.="_E";
  					my $bl=$f->{"Status"};my $rbl;
  					if ($bl eq "On") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=1;}
  					elsif ($bl eq "Off") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=1;}
  					elsif ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=2;}
  					elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=2;}
  					elsif ($bl eq "Panic") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=3;}
  					elsif ($bl eq "Normal") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=3;}
  					else { $rbl=$bl;}
  
  					if (((($f->{"SwitchType"} eq "On/Off")||($f->{"SwitchType"} eq "Lighting Limitless/Applamp"))and($f->{"SubType"} ne "RGBW"))or($f->{"SwitchType"} eq "Contact")or($f->{"SwitchType"} eq "Dusk Sensor")) {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSwitch", "room" => "Switches", params =>[]};
  						push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SwitchType"} eq "Push On Button")or($f->{"SwitchType"} eq "Push Off Button")) {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSwitch", "room" => "Switches", params =>[]};
  						if ($f->{"SwitchType"} eq "Push Off Button") {$rbl="0"};
  						if ($f->{"SwitchType"} eq "Push On Button") {$rbl="1"};
  						push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  						#push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"1"} );
  						#push (@{$feeds->{'params'}}, {"key" => "Level", "value" =>"$rbl"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SubType"} eq "RGBW")) {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevRGBLight", "room" => "Switches", params =>[]};
  						if ($rbl=~/Set Level/) {$rbl=1;
  							$device_tab{$f->{"idx"}}->{"MaxDimLevel"} = $f->{"MaxDimLevel"};
  							push (@{$feeds->{'params'}}, {"key" => "dimmable", "value" => "1" } );
  							push (@{$feeds->{'params'}}, {"key" => "Level", "value" => $f->{"Level"} } );
  						}
  
  						push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SwitchType"} eq "Dimmer")||($f->{"SwitchType"} eq "Doorbell")) {
  						#DevDimmer	Dimmable light
  						#Status	Current status : 1 = On / 0 = Off	N/A
  						#Level	Current dim level (0-100)	%
  						#"idx" : "3", "Name" : "Alerte",  "Level" : 0,  "SwitchType" : "Dimmer",  "Status" : "Off","LastUpdate" : "2014-03-18 22:17:18"
  						if ($rbl=~/Set Level/) {$rbl=1;}
  						$device_tab{$f->{"idx"}}->{"MaxDimLevel"} = $f->{"MaxDimLevel"};
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDimmer", "room" => "Switches", params =>[]};
  
  						push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => $f->{"Level"} } );
  
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"SwitchType"} eq "Blinds Inverted") {
  						#DevShutter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  						my $v;
  						if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  						my $bl=$f->{"Status"};my $rbl;
  						if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=5;}
  						elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=5;};
  						push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SwitchType"} eq "Unknown")||($f->{"SwitchTypeVal"} eq "16")) {
  						#DevShutter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  						my $v=$f->{"Level"};
  
  						push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"SwitchType"} eq "Blinds Percentage") {
  						#DevShutter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  						my $v;
  						if ($f->{"Status"} eq "Open") {$v=100;} else {$v=$f->{"Level"}};
  						my $bl=$f->{"Status"};my $rbl;
  						if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  						elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  
  						push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SwitchType"} eq "Blinds")&&($f->{"SubType"} ne "RollerTrol, Hasta new")) {
  						#DevShutter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  						my $v;
  						if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  						my $bl=$f->{"Status"};my $rbl;
  						if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  						elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  						push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"SwitchType"} eq "Venetian Blinds EU")||($f->{"SwitchType"} eq "Venetian Blinds US")||($f->{"SubType"} eq "RollerTrol, Hasta new")) {
  						#DevShutter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  						my $v;
  						if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  						my $bl=$f->{"Status"};my $rbl;
  						if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  						elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  						push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"1"} );
  						push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  						push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"SwitchType"} eq "Motion Sensor") {
  						#DevMotion	Motion security sensor
  						#Status	CM180 status : 1 = On / 0 = Off	N/A
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevMotion", "room" => "Switches", params =>[]};
  						push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  						push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  						push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  						push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"SwitchType"} eq "Door Lock") {
  						#DevLock	Door / window lock
  						#Status	CM180 status : 1 = On / 0 = Off	N/A
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDoor", "room" => "Switches", params =>[]};
  						push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  						push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  						push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  						push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  						push (@{$feed->{'devices'}}, $feeds );
  					}elsif ($f->{"SwitchType"} eq "Smoke Detector") {
  						#DevSmoke	Smoke security sensor
  						#Armable	Ability to arm the device : 1 = Yes / 0 = No	N/A
  						#Ackable	Ability to acknowledge alerts : 1 = Yes / 0 = No	N/A
  						#Armed	Current arming status : 1 = On / 0 = Off	N/A
  						#Tripped	Is the sensor tripped ? (0 = No - 1 = Tripped)	N/A				
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSmoke", "room" => "Switches", params =>[]};
  						push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  						if ($f->{"Type"} eq "Security") {
  							push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "1" } );
  						} else {
  							push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  						}
  						push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  						push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  						#"GET http://192.168.0.24:8080/json.htm?type=command&param=resetsecuritystatus&idx=202&switchcmd=Normal"
  						push (@{$feed->{'devices'}}, $feeds );				
  					}
  					#DevDoor	Door / window security sensor
  					#DevFlood	Flood security sensor
  					#DevCO2Alert	CO2 Alert sensor	
  				} else {
  					if ((($f->{"Type"} eq "P1 Smart Meter") and ($f->{"SubType"} eq "Energy")) or (($f->{"Type"} eq "YouLess Meter") and ($f->{"SubType"} eq "YouLess counter")) ) {
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#ConsoTotal     Current total consumption       kWh
  						#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						my $usage;
  						if ($f->{"Usage"}) {
  							($usage)= ($f->{"Usage"} =~ /(\d+) Watt/);
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W", "graphable" => "true"} );
  						} elsif ($f->{"Counter"}) {
  							($usage)= ($f->{"Counter"} =~ /(\d+) Watt/);
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W", "graphable" => "true"} );
  						}
  						my ($total)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$total=ceil($total);
  						push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "kWh"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif (($f->{"Type"} eq "P1 Smart Meter") and ($f->{"SubType"} eq "Gas"))  {
  						# (Dutch)P1 Gas Meter
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						my ($usage)= ($f->{"CounterToday"} =~ /(\d+) m3/);
  						my ($total)= ($f->{"Counter"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "m3"} );
  						push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "m3"} );
  						push (@{$feed->{'devices'}}, $feeds );
  						
  						# Generic Sensor showing today's value
  						my ($usage_today)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$feeds={"id" => $f->{"idx"}."_today", "name" => $name."_today", "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$usage_today", "unit"=> "m3", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Energy") {
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#ConsoTotal     Current total consumption       kWh
  						#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						#if ($f->{"Usage"}) {
  							my $usage;
  							($usage)= ($f->{"Usage"} =~ /(\d+) Watt/);
  							if (!$usage) {$usage="0";}
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W"} );#}
  						my ($total)= ($f->{"Data"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$total=ceil($total);
  						 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "kWh", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Usage") {
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#"Type" : "Usage", "SubType" : "Electric", "Data" : "122.3 Watt"
  						my ($total)= ($f->{"Data"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$total=ceil($total);
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$total", "unit" => "W"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Current/Energy") {
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#ConsoTotal     Current total consumption       kWh
  						#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  						my ($L1,$L2,$L3,$tot)= split(/,/,$f->{"Data"});
  						my ($l1)= ($L1 =~ /(\d+) Watt/);
  						my ($l2)= ($L2 =~ /(\d+) Watt/);
  						my ($l3)= ($L3 =~ /(\d+) Watt/);
  						if ($l1) {	
  							my $feeds={"id" => $f->{"idx"}."_L1", "name" => $name." L1", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l1", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  						if ($l2) {	
  							my $feeds={"id" => $f->{"idx"}."_L2", "name" => $name." L2", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l2", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  						if ($l3) {	
  							my $feeds={"id" => $f->{"idx"}."_L3", "name" => $name." L3", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l3", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  					}  elsif (($f->{"Type"} =~ "Temp")||($f->{"Type"} =~ "Humidity"))  {
  						if (($f->{"Type"} =~ "Temp")&&($f->{"Type"} =~ "Humidity")) {
  							my $feeds;
  							$feeds={params =>[],"room" => "Temp","type" => "DevTempHygro","name" => $name, "id" => $f->{"idx"}};
  
  							my $v=$f->{"Temp"};
  							push (@{$feeds->{'params'}}, {"key" => "temp", "value" => "$v", "unit" => $t_unit, "graphable" => "true"} );
  							my $vh=$f->{"Humidity"};
  							push (@{$feeds->{'params'}}, {"key" => "hygro", "value" => "$vh", "unit" => "%", "graphable" => "true" });
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"Type"} eq "Temp") {
  							#DevTemperature Temperature sensor
  							#Value  Current temperature     *C
  							#"Temp" : 21.50,  "Type" : "Temp + Humidity" / Type" : "Temp",
  							$device_tab{$f->{"idx"}}->{"graph"} = 'te';
  							my $feeds;
  							$feeds={params =>[],"room" => "Temp","type" => "DevTemperature","name" => $name, "id" => $f->{"idx"}};
  							my $v=$f->{"Temp"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => $t_unit, "graphable" => "true"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"Type"} eq "Humidity") {
  							#DevHygrometry  Hygro sensor
  							#Value  Current hygro value     %
  							# "Humidity" : 52  "Type" : "Temp + Humidity" / Type" : "Humidity",
  							$device_tab{$f->{"idx"}}->{"graph"} = 'hu';
  
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevHygrometry", "room" => "Temp", params =>[]};
  							my $v=$f->{"Humidity"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "%", "graphable" => "true" });
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  					 	if ($f->{"Type"} =~ "Baro") {
  							#DevPressure    Pressure sensor
  							#Value  Current pressure        mbar
  							#"Barometer" : 1022, "Type" : "Temp + Humidity + Baro"
  							my $idx=$f->{"idx"};
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							if ($f->{"Type"} eq "Temp + Humidity + Baro") {$idx=$idx."_1"};
  							my $feeds={"id" => $idx, "name" => $name, "type" => "DevPressure", "room" => "Temp", params =>[]};
  							my $v=$f->{"Barometer"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "mbar"} );
  								push (@{$feed->{'devices'}}, $feeds );
  						}
  					}  elsif ($f->{"Type"} eq "Rain")  {
  						#DevRain        Rain sensor
  						#Value  Current instant rain value      mm/h
  						#Accumulation   Total rain accumulation mm
  						#"Rain" : "0.0", "RainRate" : "0.0", "Type" : "Rain"
  						$device_tab{$f->{"idx"}}->{"graph"} = 'mm';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevRain", "room" => "Temp", params =>[]};
  						my $v0=$f->{"RainRate"};
  						my $v1=$f->{"Rain"};
  						push (@{$feeds->{'params'}}, {"key" => "Accumulation", "value" => "$v1", "unit" => "mm", "graphable" => "true"} );
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v0", "unit" => "mm/h"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "UV")  {
  						#DevUV  UV sensor
  						#Value  Current UV index        index
  						# "Type" : "UV","UVI" : "6.0"
  						$device_tab{$f->{"idx"}}->{"graph"} = 'uvi';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevUV", "room" => "Temp", params =>[]};
  						my $v=$f->{"UVI"};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Lux")  {
  						#DevLux  Lux sensor
  						#Value  Current Lux value        index
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevLuminosity", "room" => "Temp", params =>[]};
  						my ($v)=($f->{"Data"}=~/(\d+) Lux/);
  						$device_tab{$f->{"idx"}}->{"graph"} = 'uvi';
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Air Quality")  {
  						#DevCO2  CO2 sensor
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevCO2", "room" => "Temp", params =>[]};
  						my ($v)=($f->{"Data"}=~/(\d+) ppm/);
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "ppm", "graphable" => "true"});
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "Wind")  {
  						#DevWind wind
  						$device_tab{$f->{"idx"}}->{"graph"} = 'sp';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevWind", "room" => "Temp", params =>[]};
  						my ($dir)=($f->{"Direction"}=~/(\d+)/);
  						my ($speed)=($f->{"Speed"}=~/(\d+)/);
  						push (@{$feeds->{'params'}}, {"key" => "Speed", "value" => "$speed", "unit" => "km/h", "graphable" => "true"});
  						push (@{$feeds->{'params'}}, {"key" => "Direction", "value" => "$dir", "unit" => "°"});
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($f->{"Type"} eq "RFXMeter")  {
  						if ($f->{"SwitchTypeVal"} eq "1") {
  							#Gas
  							my ($usage)= ($f->{"CounterToday"} =~ /(\d+) m3/);
  							my ($total)= ($f->{"Counter"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  							$total=ceil($total);
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$usage, "unit" => "m3"} );
  							 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>$total, "unit" => "m3"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SwitchTypeVal"} eq "2") {
  							#Water
  							my ($usage)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  							my ($total)= ($f->{"Counter"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							my $totalm3=ceil($total);
  							my $usagem3=ceil($usage/1000);
  							my $feeds={"id" => $f->{"idx"}, "name" => "$name", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usagem3", "unit" => "m3", "graphable" => "true"} );
  							 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$totalm3", "unit" => "m3"} );
  							push (@{$feed->{'devices'}}, $feeds );
  							#Water by liter
  							my $usage2=$usage; #move to liters
  							$feeds={"id" => $f->{"idx"}."_l", "name" => $name."_l", "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$usage2", "unit"=> "L"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif (($f->{"SwitchTypeVal"} eq "3")||($f->{"SubType"} eq "RFXMeter counter")) {
  							#Counter
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							my ($v)=($f->{"Counter"}=~/^([^\s]+)/);
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" => "$v"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} else {
  							push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  						}
  					} elsif ($f->{"Type"} eq "General")  {
  							if ($f->{"SubType"} eq "Percentage") {
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "%", "graphable" => "true"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "Voltage") {
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "V"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "kWh") {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						my $usage;
  						($usage)= ($f->{"Usage"} =~ /^(\d+\.\d+) Watt/);
  						push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "kWh", "graphable" => "false"} );
  						push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "Pressure") {
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevPressure", "room" => "Temp", params =>[]};
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "mbar", "graphable" => "true"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "Visibility") {
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Temp", params =>[]};
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "km"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "Solar Radiation") {
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Temp", params =>[]};
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "Watt/m2"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif (($f->{"SubType"} eq "Text")||($f->{"SubType"} eq "Alert")||($f->{"SubType"} eq "Unknown")) {	   
  	    						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  							my $v= $f->{"Data"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => ""} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"SubType"} eq "Sound Level") {	   
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							my ($v)= ($f->{"Data"} =~ /^([0-9]+) dB/);
  	    						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevNoise", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "dB", graphable => "true"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} else { 
  							push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  						}
  					} elsif (($f->{"SubType"})&&($f->{"SubType"} eq "SetPoint")) {
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevThermostat", "room" => "Temp", params =>[]};
  							my ($v)= ($f->{"SetPoint"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "cursetpoint", "value" => "$v"});
  							push (@{$feeds->{'params'}}, {"key" => "curtemp", "value" => "$v", "unit"=>$t_unit} );
  							push (@{$feeds->{'params'}}, {"key" => "step", "value" => "0.5"} );
  							push (@{$feeds->{'params'}}, {"key" => "curmode", "value" => "default"} );
  							push (@{$feeds->{'params'}}, {"key" => "availablemodes", "value" => "default"} );
  							push (@{$feed->{'devices'}}, $feeds );
  					} else {
  						#catchall
  						if ($f->{"idx"}>5) {push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};}					}
  				}
  			}; 
  		}
  
  		#Unknown device list
  		my $ind_unk=2;
  		foreach my $devt ( @unk_dev)  {
  			my $feeds={"id" => "S".$ind_unk++, "name" => "$devt", "type" => "DevGenericSensor", "room" => "noroom", params =>[]};
  			push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"unk", "unit"=> "", "graphable" => "false"} );
  			push (@{$feed->{'devices'}}, $feeds );
  		}
  	} else {
  		my $feeds={"id" => "S00", "name" => "Unable to connect to Domoticz", "type" => "DevGenericSensor",  params =>[]};
  		my $ver=config->{domo_path};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$ver", "unit"=> "", "graphable" => "false"} );
  		push (@{$feed->{'devices'}}, $feeds );
  		$feeds={"id" => "S01", "name" => "Please add this gateway in Setup/settings/Local Networks", "type" => "DevGenericSensor",  params =>[]};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"", "unit"=> "", "graphable" => "false"} );
  		push (@{$feed->{'devices'}}, $feeds );
  	}
  
  	#MPD
  	if ($mpd_host ne '') {
  		$mpd=Audio::MPD->new ( host => $mpd_host);
  	}
  	#Status
  	if ($mpd_host) {
  		my $status = $mpd->status;
  		my $song = $mpd->current;
  		my $feeds={"id" => "V2", "name" => $song->artist." - ".$song->album, "type" => "DevMultiSwitch", "room" => "Volumio", params =>[]};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>$status->state, "unit"=> "", "graphable" => "false"} );
  		push (@{$feeds->{'params'}}, {"key" => "Choices", "value" => "play,stop,pause,next,prev,volumeUP,volumeDOWN"});
  		push (@{$feed->{'devices'}}, $feeds );
  	}
  
  	#Get Scenes
  	$system_url=config->{domo_path}."/json.htm?type=scenes";
  	$json = $ua->get( $system_url );
  	#warn "Could not get $system_url!" unless defined $json;
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  					my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  	#	debug($dt->strftime("%Y-%m-%d %H:%M:%S"));
  					my $name=$f->{"Name"};
  					$name=~s/%/P/;
  					#DevScene       Scene (launchable)
  					#LastRun        Date of last run        N/A
  					#"idx" : "3", "Name" : "Alerte", "Type" : "Scenes", "LastUpdate" : "2014-03-18 22:17:18"
  					if ($f->{"Type"} eq "Group") {
  						my $feeds={"id" => "S".$f->{"idx"}, "name" => $name, "type" => "DevMultiSwitch", "room" => "Scenes", params =>[]};
  						my $v=$dt->strftime("%Y-%m-%d %H:%M:%S");
  						push (@{$feeds->{'params'}}, {"key" => "LastRun", "value" => "$v"} );
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => $f->{"Status"}} );
  						push (@{$feeds->{'params'}}, {"key" => "Choices", "value" => "Mixed,On,Off"} );
  						push (@{$feed->{'devices'}}, $feeds );
  
  					} else {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevScene", "room" => "Scenes", params =>[]};
  						my $v=$dt->strftime("%Y-%m-%d %H:%M:%S");
  						push (@{$feeds->{'params'}}, {"key" => "LastRun", "value" => "$v"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  			}
  		}
  	}
  	#Get Camera
  	$system_url=config->{domo_path}."/json.htm?type=cameras";
  debug($system_url);
  	$json = $ua->get( $system_url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  					my $name=$f->{"Name"};
  					$name=~s/\s/_/;
  					$name=~s/\s/_/;
  					$name=~s/\//_/;
  					$name=~s/%/P/;
  					my $feeds={"id" => $f->{"idx"}."_cam", "name" => $name, "type" => "DevCamera", "room" => "Switches", params =>[]};
  					my $v=$f->{"ImageURL"};my $v2=config->{external_url_camera};my $v3=$f->{"VideoURL"};
  					if ($v =~ /^http/) {
  						push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  					} else {
  						if ($f->{"Username"}) {
  							$v="http://".$f->{"Username"}.":".$f->{"Password"}."@".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"ImageURL"};
  							push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  						} else {
  							$v="http://".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"ImageURL"};
  							push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  	
  						}
  					}
  					if ($v2) {push (@{$feeds->{'params'}}, {"key" => "remotejpegurl", "value" => "$v2"} );}
  					push (@{$feed->{'devices'}}, $feeds );
  					# Now if VideoURL
  					if ($v3) {
  						my $feeds2={"id" => $f->{"idx"}."_video", "name" => $name, "type" => "DevCamera", "room" => "Switches", params =>[]};
  						if ($f->{"Username"}) {
  							$v="http://".$f->{"Username"}.":".$f->{"Password"}."@".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"VideoURL"};
  							push (@{$feeds2->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  							} else {
  							$v="http://".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"VideoURL"};
  							push (@{$feeds2->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  							}
  						push (@{$feed->{'devices'}}, $feeds2 );
  						}
  			}
  		}
  	}
  	#DevGenericSensor      Generic sensor (any value)
  	#Value  Current value   N/A
  
  
  	
  	return to_json($feed, { utf8 => 1} );
  	return { success => true};
  };
  
  sub getDeviceType($) {
  	my ($deviceId)=@_;
  	my $url=config->{domo_path}."/json.htm?type=devices&rid=$deviceId";
  	my $decoded;
  	my @results;
  debug($url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  				if ($f->{SubType} eq "RFXMeter counter") {
  					return("counter");
  				} else {
  					return($f->{Type});
  				}
  			}
  		}
  	}
  }
  sub getLastVersion() {
  	my $dt = DateTime->now();
  	if ($last_version_dt < $dt->add( hours => 4 )) {
  		my @res;
  		push @res,$last_version;
  		push @res,"";
  		return(@res);
  	} else {
  		my $url="https://api.github.com/repos/empierre/MyDomoAtHome/releases/latest";
  		my $decoded;
  		my @results;
  	debug($url);
  		my $ua = LWP::UserAgent->new();
  		$ua->agent("MyDomoREST/$VERSION");
  		my $json = $ua->get( $url );
  		if ($json->is_success) {
  			# Decode the entire JSON
  			$decoded = JSON->new->utf8(0)->decode( $json->decoded_content );
  			if ($decoded) {
  				my @res;
  				push @res,$decoded->{tag_name};
  				push @res,$decoded->{body};
  				$last_version_dt=DateTime->now;
  				$last_version=$decoded->{tag_name};
  				return(@res);
  			}
  		} else {return "err";}
  	}
  }
  1;
DOMO

$fatpacked{"Domo2.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'DOMO2';
  package Domo2;
  # This program is free software; you can redistribute it and/or
  # modify it under the terms of the GNU General Public License
  # version 2 as published by the Free Software Foundation.
  # Author: epierre <epierre@e-nef.com>
  use Dancer2 appname => 'Domo';
  use File::Slurp;
  use File::Spec;
  use LWP::UserAgent;
  use Crypt::SSLeay;
  use utf8;
  use Encode qw/ encode decode /;
  use Time::Piece;
  use feature     qw< unicode_strings >;
  use POSIX qw(ceil);
  use Audio::MPD;
  use Switch;
  use warnings;
  use strict;
  
  our $VERSION = '0.12';
  set warnings => 0;
  my %device_tab;
  my %room_tab;
  my %device_list;
  my $last_version;    #last version in github
  my $last_version_dt; # last version text in github
  
  set serializer => 'JSON'; 
  set 'database'     => File::Spec->catfile( config->{domo_db});
  prefix undef;
  
  my $mpd_host=config->{volumio_path};
  my $mpd;
  
  get '/' => sub {
      template 'index2';
  };
  
  get '/rooms' => sub {
      #Room list
  	my @room={};
  	foreach my $key (keys %room_tab) {
  		push @room, { "id"=> "$key", "name"=> "$key" };	 
  	}
  };
  
  get '/system' => sub {
   return {"id"=> "MyDomoAtHome","apiversion"=> 1};
  };
  
  get '/devices/:deviceId/:paramKey/histo/:startdate/:enddate' => sub {
  	my $deviceId = params->{deviceId};
  	my $paramKey = params->{paramKey}||"";
  	my $startdate = params->{startdate}||"";
  	my $enddate = params->{enddate}||"";
  
  	my $type=lc(&getDeviceType($deviceId));
  	my $ptype=$type;
  debug("TYPE:$type\n");
  	if (($type eq "lux")||($type eq "energy")) {$type="counter";}
  	if ($type eq "air quality") {$type="counter";}
  	if (($ptype eq "general")) {$type="Percentage";}
  	if (($paramKey eq "hygro")) {$type="temp";}
  	if (($paramKey eq "temp")) {$type="temp";}
  
  	my $feed={ "values" => []};
  	my $url=config->{domo_path}."/json.htm?type=graph&sensor=$type&idx=$deviceId&range=day";
  	my $decoded;
  	my @results=();
  debug($url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			my $f={};
  			foreach $f ( @results ) {
  					my $dt = Time::Piece->strptime($f->{"d"},"%Y-%m-%d %H:%M:%SS");
  					#print $dt->epoch." \n";
  					if ((($paramKey eq "temp")&&($f->{"te"}))||($type eq "temp")) {
  							my $value=$f->{"te"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ((($paramKey eq "hygro")&&($f->{"hu"}))||($type eq "Humidity")) {
  							my $value=$f->{"hu"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif (($ptype eq "air quality")) {
  							my $value=$f->{"co2"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif (($type eq "counter")||($type eq "Percentage")) {
  							my $value=$f->{"v"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"mm"}) {
  							my $value=$f->{"mm"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"uvi"}) {
  							my $value=$f->{"uvi"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"v"}) {
  							my $value=$f->{"v"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					} elsif ($f->{"sp"}) {
  							my $value=$f->{"sp"};
  							my $date=$dt->epoch*1000;
  							my $feeds={"date" => "$date", "value" => "$value"};
  							push (@{$feed->{'values'}}, $feeds );
  					}
  					#di direction
  					#gu gust
  					#v counter percentage
  					#
  				}
  			return to_json($feed, { utf8 => 1} );
  			return { success => true};
  		} else {
  			status 'error';
  			return { success => false};
  		}
  	} else {
  		status 'error';
  		return { success => false};
  	}
  };
  
  get '/devices/:deviceId/action/:actionName/?:actionParam?' => sub {
  	my $deviceId = params->{deviceId};
  	my $actionName = params->{actionName};
  	my $actionParam = params->{actionParam}||"";
  
  	switch($actionName) {
  		case "setStatus" {
  			debug("actionParam=".$actionParam."\n");
  			#setStatus	0/1
  			my $action;
  			if ($actionParam) {
  				$action="On";
  			} else {
  				$action="Off";
  			}
  			my $url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=$action&level=0&passcode=";
  			debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  		}
  		case "setArmed" {
  			#setArmed	0/1
  			status 'error';
  			return { success => false, errormsg => "not implemented"};
  		}
  		case "setAck" {
  			#setAck	
  			my $url=config->{domo_path}."/json.htm?type=command&param=resetsecuritystatus&idx=$deviceId&switchcmd=Normal";
  		debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  		}
  		case "setLevel" {
  			#/json.htm?type=command&param=switchlight&idx=&switchcmd=Set%20Level&level=6
  			my $url;
  			if (($device_tab{$deviceId}->{"Action"}==2)or($device_tab{$deviceId}->{"Action"}==3)) {
  				if ($actionParam eq "100") {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=$actionParam&passcode=";
  				} else {
  					my $setLevel=ceil($actionParam*($device_tab{$deviceId}->{"MaxDimLevel"})/100);
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$setLevel&passcode=";
  				}
  			} elsif (($device_tab{$deviceId}->{"Action"}==5)) {
  				#Blinds inverted
  				if ($actionParam eq "100") {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=0&passcode=";
  				} else {
  					my $setLevel=ceil($actionParam*$device_tab{$deviceId}->{"MaxDimLevel"}/100);
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$setLevel&passcode=";
  				}
  			} elsif (($device_tab{$deviceId}->{"Action"}==6)) {
  				#Blinds -> On for Closed, Off for Open 
  				if ($actionParam eq "100") {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=0&passcode=";
  				} else {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=0&passcode=";
  				}
  			} else {
  				if ($actionParam eq "1") {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Off&level=$actionParam&passcode=";
  				} elsif ($actionParam eq "0") {
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=On&level=$actionParam&passcode=";
  
  				} else {
  					my $setLevel=ceil($actionParam*$device_tab{$deviceId}->{"MaxDimLevel"}/100);
  					$url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Set%20Level&level=$setLevel&passcode=";
  				}
  			}
  
  				debug($url);
  				my $browser = LWP::UserAgent->new;
  				my $response = $browser->get($url);
  				if ($response->is_success){ 
  					return { success => true};
  				} else {
  					status 'error';
  					return { success => false, errormsg => $response->status_line};
  				}
  		} 
  		case "stopShutter"{
  			#stopShutter (Venetian store)
  			my $url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=Stop&level=0&passcode=";
  		debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  			return { success => true};
  		}
  		case "pulseShutter" {
  				#pulseShutter	up/down
  				status 'error';
  				return { success => false, errormsg => "not implemented"};
  		}
  		case "setSetPoint" {
  			#DevThermostat
  			my $url=config->{domo_path}."/json.htm?type=setused&idx=$deviceId&used=true&setpoint=$actionParam";
  			debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  			return { success => true};
  		}
  		case 'launchScene' {
  			#launchScene
  			#/json.htm?type=command&param=switchscene&idx=&switchcmd=
  			my $url=config->{domo_path}."/json.htm?type=command&param=switchscene&idx=$deviceId&switchcmd=On&passcode=";
  		debug($url);
  			my $browser = LWP::UserAgent->new;
  			my $response = $browser->get($url);
  			if ($response->is_success){ 
  				return { success => true};
  			} else {
  				status 'error';
  				return { success => false, errormsg => $response->status_line};
  			}
  			return { success => true};
  		}
  		case 'setColor' {
  			my $url=config->{domo_path}."/json.htm?type=command&param=setcolorbrightnessvalue&idx=$deviceId&passcode=";
  			debug($url);
  				my $browser = LWP::UserAgent->new;
  				my $response = $browser->get($url);
  				if ($response->is_success){ 
  					return { success => true};
  				} else {
  					status 'error';
  					return { success => false, errormsg => $response->status_line};
  				}
  		}
  		case 'setChoice' {
  			if ($deviceId=~/^S/) {
  				my ($sc)=$deviceId=~/S(\d+)/;
  				my $url=config->{domo_path}."/json.htm?type=command&param=switchscene&idx=$sc&switchcmd=$actionParam&passcode=";
  			debug($url);
  				my $browser = LWP::UserAgent->new;
  				my $response = $browser->get($url);
  				if ($response->is_success){ 
  					return { success => true};
  				} else {
  					status 'error';
  					return { success => false, errormsg => $response->status_line};
  				}
  			} elsif ($deviceId=~/^V/) {
  				my ($sc)=$deviceId=~/V(\d+)/;
  				if ($actionParam eq "play") {
  					$mpd->play;
  				}elsif ($actionParam eq "pause") {
  					$mpd->pause;
  				}elsif ($actionParam eq "stop") {
  					$mpd->stop;
  				}elsif ($actionParam eq "next") {
  					$mpd->next;
  				}elsif ($actionParam eq "prev") {
  					$mpd->next;
  				}elsif ($actionParam eq "volumeUP") {
  					$mpd->volume("+1");
  				}elsif ($actionParam eq "volumeDOWN") {
  					$mpd->volume("-1");
  				}
  			} else {
  				status 'error';
  				return { success => false, errormsg => "not implemented"};
  			}
  		}
  		case 'setMode' {
  				#setChoice string
  				status 'error';
  				return { success => false, errormsg => "not implemented"};
  			}
  		else {
  				status 'not_found';
  				return "What?";
  	   }
  	}
  };
  
  get '/devices' => sub {
  	my $feed={ "devices" => []};
  	my $t_unit="°C";
  	my $system_url = config->{domo_path}."/json.htm?type=devices&filter=all&used=true&order=Name";
  	my $decoded;
  	my @results;
  	my @unk_dev;         # list of unknown devices
  debug($system_url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $system_url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			#Own device version
  			my $feeds={"id" => "S0", "name" => "MyDomoAtHome", "type" => "DevGenericSensor",  params =>[]};
  			my $ver="$VERSION";
  			push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$ver", "unit"=> "", "graphable" => "false"} );
  			push (@{$feed->{'devices'}}, $feeds );
  			#Check for new version
  			my @and=&getLastVersion();
  			my $an1;my $an2;
  			if (($ver ne $and[0])&&($and[0] ne "err")) {
  				my $feeds={"id" => "S1", "name" => "New version found", "type" => "DevGenericSensor",  params =>[]};
  				$an1=$and[0];
  				push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$an1", "unit"=> "", "graphable" => "false"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			}
  			#
  			#Parse the devices tree
  			#
  			foreach my $f ( @results ) {
  				my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  				my $name=$f->{"Name"};
  				#$name=~s/\s/_/;
  				#$name=~s/\s/_/;
  				#$name=~s/\//_/; 
  				$name=~s/%/P/;
  				my $rbl;
  				 if ($f->{"SwitchType"}) {			
  					#print $f->{"idx"} . " " . $f->{"Name"} . " " . $f->{"Status"} . $f->{"LastUpdate"}."\n";
  					#$name.="_E";
  					my $bl=$f->{"Status"};
  					if ($bl eq "On") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=1;}
  					elsif ($bl eq "Off") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=1;}
  					elsif ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=2;}
  					elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=2;}
  					elsif ($bl eq "Panic") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=3;}
  					elsif ($bl eq "Normal") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=3;}
  					else { $rbl=$bl;}
  				}
  				switch($f->{"Type"}) {
  					case "switch" {
  						$room_tab{"Switches"}=1;
  						switch($f->{"SwitchType"}) {
  							case ["On/Off","Lighting Limitless/Applamp","Contact","Dusk Sensor"] {
  								if ($f->{"SubType"} ne "RGBW") {
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSwitch", "room" => "Switches", params =>[]};
  									push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  									push (@{$feed->{'devices'}}, $feeds );
  								} else {
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevRGBLight", "room" => "Switches", params =>[]};
  									if ($rbl=~/Set Level/) {
  										$rbl=1;
  										$device_tab{$f->{"idx"}}->{"MaxDimLevel"} = $f->{"MaxDimLevel"};
  										push (@{$feeds->{'params'}}, {"key" => "dimmable", "value" => "1" } );
  										push (@{$feeds->{'params'}}, {"key" => "Level", "value" => $f->{"Level"} } );
  									}
  									push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  									push (@{$feed->{'devices'}}, $feeds );
  								}
  							}
  							case ["Push On Button","Push Off Button"] {
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSwitch", "room" => "Switches", params =>[]};
  								if ($f->{"SwitchType"} eq "Push Off Button") {$rbl="0"};
  								if ($f->{"SwitchType"} eq "Push On Button") {$rbl="1"};
  								push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  								#push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"1"} );
  								#push (@{$feeds->{'params'}}, {"key" => "Level", "value" =>"$rbl"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case ["Dimmer","Doorbell"] {
  								#DevDimmer	Dimmable light
  								#Status	Current status : 1 = On / 0 = Off	N/A
  								#Level	Current dim level (0-100)	%
  								#"idx" : "3", "Name" : "Alerte",  "Level" : 0,  "SwitchType" : "Dimmer",  "Status" : "Off","LastUpdate" : "2014-03-18 22:17:18"
  								if ($rbl=~/Set Level/) {$rbl=1;}
  								$device_tab{$f->{"idx"}}->{"MaxDimLevel"} = $f->{"MaxDimLevel"};
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDimmer", "room" => "Switches", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  								push (@{$feeds->{'params'}}, {"key" => "Level", "value" => $f->{"Level"} } );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case ["Blinds Inverted"] {
  								#DevShutter
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  								my $v;
  								if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  								my $bl=$f->{"Status"};my $rbl;
  								if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=5;}
  								elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=5;};
  								push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  								push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  								push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case ["Unknown"] {
  								if ($f->{"SwitchTypeVal"} eq "16") {
  									#DevShutter
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  									my $v=$f->{"Level"};
  
  									push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  									push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  									push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  
  									push (@{$feed->{'devices'}}, $feeds );
  								} else {print STDERR "Unknown !";}
  							}
  							case "Blinds Percentage" {
  								#DevShutter
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  								my $v;
  								if ($f->{"Status"} eq "Open") {$v=100;} else {$v=$f->{"Level"}};
  								my $bl=$f->{"Status"};my $rbl;
  								if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  								elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  								push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  								push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  								push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case ["Blinds","Venetian Blinds EU","Venetian Blinds US"] {
  								if ($f->{"SubType"} ne "RollerTrol, Hasta new") {
  									#DevShutter
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  									my $v;
  									if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  									my $bl=$f->{"Status"};my $rbl;
  									if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  									elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  									push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"0"} );
  									push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  									push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  									push (@{$feed->{'devices'}}, $feeds );
  								} else {
  									# "RollerTrol, Hasta new"
  									#DevShutter
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevShutter", "room" => "Switches", params =>[]};
  									my $v;
  									if ($f->{"Status"} eq "Open") {$v=100;} else {$v=0;};
  									my $bl=$f->{"Status"};my $rbl;
  									if ($bl eq "Open") { $rbl=1;$device_tab{$f->{"idx"}}->{"Action"}=6;}
  									elsif ($bl eq "Closed") { $rbl=0;$device_tab{$f->{"idx"}}->{"Action"}=6;};
  									push (@{$feeds->{'params'}}, {"key" => "stopable", "value" =>"1"} );
  									push (@{$feeds->{'params'}}, {"key" => "pulseable", "value" =>"0"} );
  									push (@{$feeds->{'params'}}, {"key" => "Level", "value" => "$v" } );
  									push (@{$feed->{'devices'}}, $feeds );
  								}
  							}
  							case "Motion Sensor" {
  								#DevMotion	Motion security sensor
  								#Status	CM180 status : 1 = On / 0 = Off	N/A
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevMotion", "room" => "Switches", params =>[]};
  								push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  								push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  								push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  								push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "Door Lock" {
  								#DevLock	Door / window lock
  								#Status	CM180 status : 1 = On / 0 = Off	N/A
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDoor", "room" => "Switches", params =>[]};
  								push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  								push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  								push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  								push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "Smoke Detector" {
  								#DevSmoke	Smoke security sensor
  								#Armable	Ability to arm the device : 1 = Yes / 0 = No	N/A
  								#Ackable	Ability to acknowledge alerts : 1 = Yes / 0 = No	N/A
  								#Armed	Current arming status : 1 = On / 0 = Off	N/A
  								#Tripped	Is the sensor tripped ? (0 = No - 1 = Tripped)	N/A				
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSmoke", "room" => "Switches", params =>[]};
  								push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  								if ($f->{"Type"} eq "Security") {
  									push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "1" } );
  								} else {
  									push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  								}
  								push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  								push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  								#"GET http://192.168.0.24:8080/json.htm?type=command&param=resetsecuritystatus&idx=202&switchcmd=Normal"
  								push (@{$feed->{'devices'}}, $feeds );				
  							}
  							#DevDoor	Door / window security sensor
  							#DevFlood	Flood security sensor
  							#DevCO2Alert	CO2 Alert sensor
  						}
  					}
  					case ["P1 Smart Meter","YouLess Meter"] {
  						$room_tab{"Utility"}=1;
  						switch($f->{"SubType"}) {
  							case ["Energy","YouLess counter"] {
  								#DevElectricity Electricity consumption sensor
  								#Watts  Current consumption     Watt
  								#ConsoTotal     Current total consumption       kWh
  								#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  								my $usage;
  								if ($f->{"Usage"}) {
  									($usage)= ($f->{"Usage"} =~ /(\d+) Watt/);
  									push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W", "graphable" => "true"} );
  								} elsif ($f->{"Counter"}) {
  									($usage)= ($f->{"Counter"} =~ /(\d+) Watt/);
  									push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W", "graphable" => "true"} );
  								}
  								my ($total)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  								$total=ceil($total);
  								push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "kWh"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case"Gas" {
  								# (Dutch)P1 Gas Meter
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  								my ($usage)= ($f->{"CounterToday"} =~ /(\d+) m3/);
  								my ($total)= ($f->{"Counter"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "m3"} );
  								push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "m3"} );
  								push (@{$feed->{'devices'}}, $feeds );							
  								# Generic Sensor showing today's value
  								my ($usage_today)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  								$feeds={"id" => $f->{"idx"}."_today", "name" => $name."_today", "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$usage_today", "unit"=> "m3", "graphable" => "true"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  						}
  					}
  					case "Energy" {
  						$room_tab{"Utility"}=1;
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#ConsoTotal     Current total consumption       kWh
  						#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						#if ($f->{"Usage"}) {
  							my $usage;
  							($usage)= ($f->{"Usage"} =~ /(\d+) Watt/);
  							if (!$usage) {$usage="0";}
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "W"} );#}
  						my ($total)= ($f->{"Data"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$total=ceil($total);
  						 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$total", "unit" => "kWh", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "Usage" {
  						$room_tab{"Utility"}=1;
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#"Type" : "Usage", "SubType" : "Electric", "Data" : "122.3 Watt"
  						my ($total)= ($f->{"Data"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  						$total=ceil($total);
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  						push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$total", "unit" => "W"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "Current/Energy" {
  						$room_tab{"Utility"}=1;
  						#DevElectricity Electricity consumption sensor
  						#Watts  Current consumption     Watt
  						#ConsoTotal     Current total consumption       kWh
  						#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  						my ($L1,$L2,$L3,$tot)= split(/,/,$f->{"Data"});
  						my ($l1)= ($L1 =~ /(\d+) Watt/);
  						my ($l2)= ($L2 =~ /(\d+) Watt/);
  						my ($l3)= ($L3 =~ /(\d+) Watt/);
  						if ($l1) {	
  							my $feeds={"id" => $f->{"idx"}."_L1", "name" => $name." L1", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l1", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  						if ($l2) {	
  							my $feeds={"id" => $f->{"idx"}."_L2", "name" => $name." L2", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l2", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  						if ($l3) {	
  							my $feeds={"id" => $f->{"idx"}."_L3", "name" => $name." L3", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  							push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$l3", "unit" => "W"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  					}
  					case [/Temp/,/Humidity/]  {
  						$room_tab{"Weather"}=1;
  						if (($f->{"Type"} =~ "Temp")&&($f->{"Type"} =~ "Humidity")) {
  							my $feeds;
  							$feeds={params =>[],"room" => "Temp","type" => "DevTempHygro","name" => $name, "id" => $f->{"idx"}};
  
  							my $v=$f->{"Temp"};
  							push (@{$feeds->{'params'}}, {"key" => "temp", "value" => "$v", "unit" => $t_unit, "graphable" => "true"} );
  							my $vh=$f->{"Humidity"};
  							push (@{$feeds->{'params'}}, {"key" => "hygro", "value" => "$vh", "unit" => "%", "graphable" => "true" });
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"Type"} eq "Temp") {
  							#DevTemperature Temperature sensor
  							#Value  Current temperature     *C
  							#"Temp" : 21.50,  "Type" : "Temp + Humidity" / Type" : "Temp",
  							$device_tab{$f->{"idx"}}->{"graph"} = 'te';
  							my $feeds;
  							$feeds={params =>[],"room" => "Temp","type" => "DevTemperature","name" => $name, "id" => $f->{"idx"}};
  							my $v=$f->{"Temp"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => $t_unit, "graphable" => "true"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} elsif ($f->{"Type"} eq "Humidity") {
  							#DevHygrometry  Hygro sensor
  							#Value  Current hygro value     %
  							# "Humidity" : 52  "Type" : "Temp + Humidity" / Type" : "Humidity",
  							$device_tab{$f->{"idx"}}->{"graph"} = 'hu';
  
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevHygrometry", "room" => "Temp", params =>[]};
  							my $v=$f->{"Humidity"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "%", "graphable" => "true" });
  							push (@{$feed->{'devices'}}, $feeds );
  						}
  						if ($f->{"Type"} =~ "Baro") {
  							#DevPressure    Pressure sensor
  							#Value  Current pressure        mbar
  							#"Barometer" : 1022, "Type" : "Temp + Humidity + Baro"
  							my $idx=$f->{"idx"};
  							$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  							if ($f->{"Type"} eq "Temp + Humidity + Baro") {$idx=$idx."_1"};
  							my $feeds={"id" => $idx, "name" => $name, "type" => "DevPressure", "room" => "Temp", params =>[]};
  							my $v=$f->{"Barometer"};
  							push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "mbar"} );
  								push (@{$feed->{'devices'}}, $feeds );
  						}
  					}
  					case "Rain"  {
  						$room_tab{"Weather"}=1;
  						#DevRain        Rain sensor
  						#Value  Current instant rain value      mm/h
  						#Accumulation   Total rain accumulation mm
  						#"Rain" : "0.0", "RainRate" : "0.0", "Type" : "Rain"
  						$device_tab{$f->{"idx"}}->{"graph"} = 'mm';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevRain", "room" => "Temp", params =>[]};
  						my $v0=$f->{"RainRate"};
  						my $v1=$f->{"Rain"};
  						push (@{$feeds->{'params'}}, {"key" => "Accumulation", "value" => "$v1", "unit" => "mm", "graphable" => "true"} );
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v0", "unit" => "mm/h"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "UV"  {
  						$room_tab{"Weather"}=1;
  						#DevUV  UV sensor
  						#Value  Current UV index        index
  						# "Type" : "UV","UVI" : "6.0"
  						$device_tab{$f->{"idx"}}->{"graph"} = 'uvi';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevUV", "room" => "Temp", params =>[]};
  						my $v=$f->{"UVI"};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "Lux"  {
  						$room_tab{"Utility"}=1;
  						#DevLux  Lux sensor
  						#Value  Current Lux value        index
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevLuminosity", "room" => "Temp", params =>[]};
  						my ($v)=($f->{"Data"}=~/(\d+) Lux/);
  						$device_tab{$f->{"idx"}}->{"graph"} = 'uvi';
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "graphable" => "true"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "Air Quality"  {
  						$room_tab{"Utility"}=1;
  						#DevCO2  CO2 sensor
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevCO2", "room" => "Temp", params =>[]};
  						my ($v)=($f->{"Data"}=~/(\d+) ppm/);
  						$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "ppm", "graphable" => "true"});
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "Wind"  {
  						$room_tab{"Weather"}=1;
  						#DevWind wind
  						$device_tab{$f->{"idx"}}->{"graph"} = 'sp';
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevWind", "room" => "Temp", params =>[]};
  						my ($dir)=($f->{"Direction"}=~/(\d+)/);
  						my ($speed)=($f->{"Speed"}=~/(\d+)/);
  						push (@{$feeds->{'params'}}, {"key" => "Speed", "value" => "$speed", "unit" => "km/h", "graphable" => "true"});
  						push (@{$feeds->{'params'}}, {"key" => "Direction", "value" => "$dir", "unit" => "°"});
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  					case "RFXMeter"  {
  						$room_tab{"Utility"}=1;
  						switch($f->{"SwitchTypeVal"}) {
  							case "1" {
  								#Gas
  								my ($usage)= ($f->{"CounterToday"} =~ /(\d+) m3/);
  								my ($total)= ($f->{"Counter"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  								$total=ceil($total);
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$usage, "unit" => "m3"} );
  								 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>$total, "unit" => "m3"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "2" {
  								#Water
  								my ($usage)= ($f->{"CounterToday"} =~ /([0-9]+(?:\.[0-9]+)?)/);
  								my ($total)= ($f->{"Counter"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								my $totalm3=ceil($total);
  								my $usagem3=ceil($usage/1000);
  								my $feeds={"id" => $f->{"idx"}, "name" => "$name", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usagem3", "unit" => "m3", "graphable" => "true"} );
  								 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>"$totalm3", "unit" => "m3"} );
  								push (@{$feed->{'devices'}}, $feeds );
  								#Water by liter
  								my $usage2=$usage; #move to liters
  								$feeds={"id" => $f->{"idx"}."_l", "name" => $name."_l", "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$usage2", "unit"=> "L"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "3" {
  								if ($f->{"SubType"} eq "RFXMeter counter") {
  									#Counter
  									$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  									my ($v)=($f->{"Counter"}=~/^([^\s]+)/);
  									push (@{$feeds->{'params'}}, {"key" => "Watts", "value" => "$v"} );
  									push (@{$feed->{'devices'}}, $feeds );
  								} else {
  									push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  								}
  							}
  							else {
  								push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  							}
  						}
  					}
  					case "General"  {
  						$room_tab{"Utility"}=1;
  						switch($f->{"SubType"}) {
  							case "Percentage" {
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "%", "graphable" => "true"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "Voltage" {
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "V"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "kWh" {
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  								my $usage;
  								($usage)= ($f->{"Usage"} =~ /^(\d+\.\d+) Watt/);
  								push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>"$usage", "unit" => "kWh", "graphable" => "false"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "Pressure" {
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevPressure", "room" => "Temp", params =>[]};
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "mbar", "graphable" => "true"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							} 
  							case "Visibility" {
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Temp", params =>[]};
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "km"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							} 
  							case "Solar Radiation" {
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Temp", params =>[]};
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "Watt/m2"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							case ["Text","Alert","Unknown"] {	   
  									my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevGenericSensor", "room" => "Utility", params =>[]};
  									my $v= $f->{"Data"};
  									push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => ""} );
  									push (@{$feed->{'devices'}}, $feeds );
  							}
  							case "Sound Level" {	   
  								$device_tab{$f->{"idx"}}->{"graph"} = 'v';
  								my ($v)= ($f->{"Data"} =~ /^([0-9]+) dB/);
  								my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevNoise", "room" => "Utility", params =>[]};
  								push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "dB", graphable => "true"} );
  								push (@{$feed->{'devices'}}, $feeds );
  							}
  							else { 
  								push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  							}
  						}
  					}
  					case "Thermostat" {
  						$room_tab{"Weather"}=1;
  						if ($f->{"SubType"} eq "SetPoint") {
  							my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevThermostat", "room" => "Temp", params =>[]};
  							my ($v)= ($f->{"SetPoint"} =~ /^([0-9]+(?:\.[0-9]+)?)/);
  							push (@{$feeds->{'params'}}, {"key" => "cursetpoint", "value" => "$v"});
  							push (@{$feeds->{'params'}}, {"key" => "curtemp", "value" => "$v", "unit"=>$t_unit} );
  							push (@{$feeds->{'params'}}, {"key" => "step", "value" => "0.5"} );
  							push (@{$feeds->{'params'}}, {"key" => "curmode", "value" => "default"} );
  							push (@{$feeds->{'params'}}, {"key" => "availablemodes", "value" => "default"} );
  							push (@{$feed->{'devices'}}, $feeds );
  						} else {
  							push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  						}
  					} 
  					else {
  						#catchall
  						if ($f->{"idx"}>5) {push @unk_dev,$f->{"idx"}."-".$f->{"Name"}."-".$f->{"Type"}."-".$f->{"SubType"}."-".$f->{"SwitchTypeVal"};
  						}					
  					}
  				}
  			}
  
  			#Unknown device list
  			my $ind_unk=2;
  			foreach my $devt ( @unk_dev)  {
  				my $feeds={"id" => "S".$ind_unk++, "name" => "$devt", "type" => "DevGenericSensor", "room" => "noroom", params =>[]};
  				push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"unk", "unit"=> "", "graphable" => "false"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			}
  		} else {
  			my $feeds={"id" => "S00", "name" => "Unable to decode URL", "type" => "DevGenericSensor",  params =>[]};
  			my $ver=config->{domo_path};
  			push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$ver", "unit"=> "", "graphable" => "false"} );
  			push (@{$feed->{'devices'}}, $feeds );
  			$feeds={"id" => "S01", "name" => "Please add this gateway in Setup/settings/Local Networks", "type" => "DevGenericSensor",  params =>[]};
  			push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"", "unit"=> "", "graphable" => "false"} );
  			push (@{$feed->{'devices'}}, $feeds );
  		}
  	} else {
  		my $feeds={"id" => "S00", "name" => "Unable to connect to Domoticz", "type" => "DevGenericSensor",  params =>[]};
  		my $ver=config->{domo_path};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"$ver", "unit"=> "", "graphable" => "false"} );
  		push (@{$feed->{'devices'}}, $feeds );
  		$feeds={"id" => "S01", "name" => "Please add this gateway in Setup/settings/Local Networks", "type" => "DevGenericSensor",  params =>[]};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>"", "unit"=> "", "graphable" => "false"} );
  		push (@{$feed->{'devices'}}, $feeds );
  	}
  
  	#MPD
  	if ($mpd_host ne '') {
  		$mpd=Audio::MPD->new ( host => $mpd_host);
  		$room_tab{"Music"}=1;
  	}
  	#Status
  	if ($mpd_host) {
  		my $status = $mpd->status;
  		my $song = $mpd->current;
  		my $feeds={"id" => "V2", "name" => $song->artist." - ".$song->album, "type" => "DevMultiSwitch", "room" => "Volumio", params =>[]};
  		push (@{$feeds->{'params'}}, {"key" => "Value", "value" =>$status->state, "unit"=> "", "graphable" => "false"} );
  		push (@{$feeds->{'params'}}, {"key" => "Choices", "value" => "play,stop,pause,next,prev,volumeUP,volumeDOWN"});
  		push (@{$feed->{'devices'}}, $feeds );
  	}
  
  	#Get Scenes
  	$system_url=config->{domo_path}."/json.htm?type=scenes";
  	$json = $ua->get( $system_url );
  	#warn "Could not get $system_url!" unless defined $json;
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			$room_tab{"Scene"}=1;
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  					my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  	#	debug($dt->strftime("%Y-%m-%d %H:%M:%S"));
  					my $name=$f->{"Name"};
  					$name=~s/%/P/;
  					#DevScene       Scene (launchable)
  					#LastRun        Date of last run        N/A
  					#"idx" : "3", "Name" : "Alerte", "Type" : "Scenes", "LastUpdate" : "2014-03-18 22:17:18"
  					if ($f->{"Type"} eq "Group") {
  						my $feeds={"id" => "S".$f->{"idx"}, "name" => $name, "type" => "DevMultiSwitch", "room" => "Scenes", params =>[]};
  						my $v=$dt->strftime("%Y-%m-%d %H:%M:%S");
  						push (@{$feeds->{'params'}}, {"key" => "LastRun", "value" => "$v"} );
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => $f->{"Status"}} );
  						push (@{$feeds->{'params'}}, {"key" => "Choices", "value" => "Mixed,On,Off"} );
  						push (@{$feed->{'devices'}}, $feeds );
  
  					} else {
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevScene", "room" => "Scenes", params =>[]};
  						my $v=$dt->strftime("%Y-%m-%d %H:%M:%S");
  						push (@{$feeds->{'params'}}, {"key" => "LastRun", "value" => "$v"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  			}
  		}
  	}
  	#Get Camera
  	$system_url=config->{domo_path}."/json.htm?type=cameras";
  debug($system_url);
  	$json = $ua->get( $system_url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  					my $name=$f->{"Name"};
  					$name=~s/\s/_/;
  					$name=~s/\s/_/;
  					$name=~s/\//_/;
  					$name=~s/%/P/;
  					my $feeds={"id" => $f->{"idx"}."_cam", "name" => $name, "type" => "DevCamera", "room" => "Switches", params =>[]};
  					my $v=$f->{"ImageURL"};my $v2=config->{external_url_camera};my $v3=$f->{"VideoURL"};
  					if ($v =~ /^http/) {
  						push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  					} else {
  						if ($f->{"Username"}) {
  							$v="http://".$f->{"Username"}.":".$f->{"Password"}."@".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"ImageURL"};
  							push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  						} else {
  							$v="http://".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"ImageURL"};
  							push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  	
  						}
  					}
  					if ($v2) {push (@{$feeds->{'params'}}, {"key" => "remotejpegurl", "value" => "$v2"} );}
  					push (@{$feed->{'devices'}}, $feeds );
  					# Now if VideoURL
  					if ($v3) {
  						my $feeds2={"id" => $f->{"idx"}."_video", "name" => $name, "type" => "DevCamera", "room" => "Switches", params =>[]};
  						if ($f->{"Username"}) {
  							$v="http://".$f->{"Username"}.":".$f->{"Password"}."@".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"VideoURL"};
  							push (@{$feeds2->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  							} else {
  							$v="http://".$f->{"Address"}.":".$f->{"Port"}."/".$f->{"VideoURL"};
  							push (@{$feeds2->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  							}
  						push (@{$feed->{'devices'}}, $feeds2 );
  						}
  			}
  		}
  	}
  	#DevGenericSensor      Generic sensor (any value)
  	#Value  Current value   N/A
  
  	return to_json($feed, { utf8 => 1} );
  	return { success => true};
  };
  
  sub getDeviceType($) {
  	my ($deviceId)=@_;
  	my $url=config->{domo_path}."/json.htm?type=devices&rid=$deviceId";
  	my $decoded;
  	my @results;
  debug($url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $url );
  	if ($json->is_success) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(1)->decode( $json->decoded_content );
  		if ($decoded->{'result'}) {
  			@results = @{ $decoded->{'result'} };
  			foreach my $f ( @results ) {
  				if ($f->{SubType} eq "RFXMeter counter") {
  					return("counter");
  				} else {
  					return($f->{Type});
  				}
  			}
  		}
  	}
  }
  sub getLastVersion() {
  	my $dt = DateTime->now();
  	if ($last_version_dt < $dt->add( hours => 4 )) {
  		my @res;
  		push @res,$last_version;
  		push @res,"";
  		return(@res);
  	} else {
  		my $url="https://api.github.com/repos/empierre/MyDomoAtHome/releases/latest";
  		my $decoded;
  		my @results;
  	debug($url);
  		my $ua = LWP::UserAgent->new();
  		$ua->agent("MyDomoREST/$VERSION");
  		my $json = $ua->get( $url );
  		if ($json->is_success) {
  			# Decode the entire JSON
  			$decoded = JSON->new->utf8(0)->decode( $json->decoded_content );
  			if ($decoded) {
  				my @res;
  				push @res,$decoded->{tag_name};
  				push @res,$decoded->{body};
  				$last_version_dt=DateTime->now;
  				$last_version=$decoded->{tag_name};
  				return(@res);
  			}
  		} else {return "err";}
  	}
  }
  start;
DOMO2

$fatpacked{"MySensors.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MYSENSORS';
  package Domo;
  # This program is free software; you can redistribute it and/or
  # modify it under the terms of the GNU General Public License
  # version 2 as published by the Free Software Foundation.
  # Author: epierre
  use Dancer ':syntax';
  use DBI;
  use File::Spec;
  use File::Slurp;
  use LWP::UserAgent;
  use Crypt::SSLeay;
  use utf8;
  use Time::Piece;
  use Device::SerialPort;
  use IO::Handle;
  use feature     qw< unicode_strings >;
  #use JSON;
  
  our $VERSION = '0.2';
  set warnings => 0;
  set 'database'     => File::Spec->catfile(File::Spec->tmpdir(), 'mysensors.db');
  
  
  set serializer => 'JSON'; 
  prefix undef;
  # USB port opening
  my $ob = &connect_usb(config->{usb_port});
  my $domo_ip = config->{domo_ip};
  my $domo_port = config->{domo_port};
  my %sensor_tab;
  
  get '/' => sub {
      template 'index';
  };
  
  get '/rooms' => sub {
         #Room list
    return {"rooms" => [ 
  		{ "id"=> "noroom", "name"=> "noroom" },
  		{ "id"=> "Switches", "name"=> "Switches" },
  		{ "id"=> "Scenes", "name"=> "Scenes" },
  		{ "id"=> "Temp", "name"=> "Weather" },
  		{ "id"=> "Utility", "name"=> "Utility" },
  			]};
  };
  
  get '/system' => sub {
   return {"id"=> "MyDomoAtHome","apiversion"=> 1};
  };
  
  
  get '/devices/:deviceId/action/:actionName/:actionParam?' => sub {
  my $deviceId = params->{deviceId};
  my $actionName = params->{actionName};
  my $actionParam = params->{actionParam}||"";
  };
  
  get '/message/:radioId/:childId/:messageType/:subType/:payload?' => sub {
  	my $radioId = params->{radioId};
  	my $childId = params->{childId};
  	my $messageType = params->{messageType};
  	my $subType = params->{subType};
  	my $payload = params->{payload}||"0";
  
  	my $dt = DateTime->now;
  	my $date=join ' ', $dt->ymd, $dt->hms;
  	 
  	
  	if ($messageType==4) {
  		#I_RELAY_NODE 		1 255 4 7 0 
  		#I_SKETCH_NAME 		1 255 4 14 Humidity
  		#I_SKETCH_VERSION 	1 255 4 15 1.0
  
  		if ($subType==5) {
  		#Gives a new node its ID
  			my $db = connect_db();
  			my $sql = "insert into device (I_BATTERY_LEVEL,I_RELAY_NODE,I_UNIT) values (100,255,'M')";
  			my $sth = $db->prepare($sql) or die $db->errstr;
  			$sth->execute or die $sth->errstr;
  			#get the id
  			$sql = 'SELECT last_insert_rowid() FROM device';
  			$sth = $db->prepare($sql) or die $db->errstr;
  			$sth->execute or die $sth->errstr;
  			my $row;my $id;while($row = $sth->fetchrow_hashref()) { $id=$row->{id};}			
             	my $msg = "$radioId;$childId;4;5;$id\n";
              my $co = $ob->write($msg);
              if (!$co) {
  					status 'error';
  					return { success => false, errormsg => "USB write failed"};					
  			}
              $ob->write_drain;
  			return { success => true};					
  		}
  		if ($subType==9) {
  		#I_PING
               my $msg = "$radioId;$childId;4;10;\n";
               my $co = $ob->write($msg);
               if (!$co) {
  					status 'error';
  					return { success => false, errormsg => "USB write failed"};					
  			 }
               $ob->write_drain;
  			 return { success => true};					
  		}
  		if ($subType==13) {
  		#Answer we are Metric
  		#I_UNIT 			1 255 4 13 0
               my $msg = "$radioId;$childId;4;13;M\n";
               my $co = $ob->write($msg);
               if (!$co) {
  					status 'error';
  					return { success => false, errormsg => "USB write failed"};					
  			 }
               $ob->write_drain;
  			 return { success => true};					
  		}
      } elsif ($messageType==1) {
  		$sensor_tab{$radioId}->{$subType}=$payload;
  		&update_sensor($radioId,$subType,$payload);
  		if($subType==0) {
  		# Read the Temp value
  	  		 my $hum=$sensor_tab{$radioId}->{1}||0;
  			 next if ($hum<=0);		
  			 `curl -s "http://$domo_ip:$domo_port/json.htm?type=command&param=udevice&idx=164&svalue=$payload;$hum;2" &`;
  			 return { success => true};					
  		}
  		if ($subType==1) {
  			# Read the Humidity value
  			my $temp=$sensor_tab{$radioId}->{0}||0;
  			next if ($temp<=0);
  			`curl -s "http://$domo_ip:$domo_port/json.htm?type=command&param=udevice&idx=164&svalue=$temp;$payload;2" &`;
  			return { success => true};					
  		} 
  	} elsif ($messageType==3) {
  	#Variable Acknowledgments	
  	} elsif ($messageType==0) {
  	#Presentation	
  	#1 255 0 17 1.3b3 (67f4ca1)
  	#S_ARDUINO_NODE		17	Arduino node device
  	#S_ARDUINO_RELAY	18	Arduino relaying node device
  		if ($subType==17) {
  			my $db = connect_db();
  			my $sql = 'insert into sensor (device_id, subtype,version) values (?, ?, ?)';
  			my $sth = $db->prepare($sql) or die $db->errstr;
  			$sth->execute($radioId, ) or die $sth->errstr;
  		}	
  	};
  
  if ($actionName eq 'setStatus') {
          #setStatus	0/1
  	my $action;
  	if ($actionParam eq 0) {
  		$action="Off";
  	} else {
  		$action="On";
  	}
  	my $url=config->{domo_path}."/json.htm?type=command&param=switchlight&idx=$deviceId&switchcmd=$action&level=0&passcode=";
  	my $browser = LWP::UserAgent->new;
  	my $response = $browser->get($url);
  	if ($response->is_success){ 
  		return { success => true};
  	} else {
  		status 'error';
  		return { success => false, errormsg => $response->status_line};
  	}
  } elsif ($actionName eq 'setArmed') {
  	#setArmed	0/1
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
  } elsif ($actionName eq 'setAck') {
  	#setAck	
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
  } elsif ($actionName eq 'setLevel') {
  	#setLevel	0-100
  	#/json.htm?type=command&param=switchlight&idx=&switchcmd=Set%20Level&level=6
  	return { success => true};
  } elsif ($actionName eq 'stopShutter') {
  	#stopShutter
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
  } elsif ($actionName eq 'pulseShutter') {
  	#pulseShutter	up/down
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
  } elsif ($actionName eq 'launchScene') {
  	#launchScene
  	#/json.htm?type=command&param=switchscene&idx=&switchcmd=
  	return { success => true};
  } elsif ($actionName eq 'setChoice') {
  	#setChoice string
  	status 'error';
  	return { success => false, errormsg => "not implemented"};
      } else {
          status 'not_found';
          return "What?";
     }
  };
  
  get '/devices' => sub {
  	my $feed={ "devices" => []};
  	my $system_url = config->{domo_path}."/json.htm?type=devices&filter=all&used=true&order=Name";
  debug($system_url);
  	my $ua = LWP::UserAgent->new();
  	$ua->agent("MyDomoREST/$VERSION");
  	my $json = $ua->get( $system_url );
  	warn "Could not get $system_url!" unless defined $json;
  	# Decode the entire JSON
  	my $decoded = JSON->new->utf8(0)->decode( $json->decoded_content );
  	my @results = @{ $decoded->{'result'} };
  	foreach my $f ( @results ) {
  			my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  			my $name=$f->{"Name"};
  			$name=~s/\s/_/;
  			$name=~s/\s/_/;
  			$name=~s/\//_/;
  			$name=~s/%/P/;
  		 if ($f->{"SwitchType"}) {			
  			#print $f->{"idx"} . " " . $f->{"Name"} . " " . $f->{"Status"} . $f->{"LastUpdate"}."\n";
  			$name.="_E";
  			my $bl=$f->{"Status"};my $rbl;
  			if ($bl eq "On") { $rbl=1;}
  			elsif ($bl eq "Off") { $rbl=0;}
  			elsif ($bl eq "Opened") { $rbl=1;}
  			elsif ($bl eq "Closed") { $rbl=0;}
  			else { $rbl=$bl;}
  			if ($f->{"SwitchType"} eq "On/Off") {
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSwitch", "room" => "Switches", params =>[]};
  				push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			} elsif ($f->{"SwitchType"} eq "Dimmer") {
  				#DevDimmer	Dimmable light
  				#Status	Current status : 1 = On / 0 = Off	N/A
  				#Level	Current dim level (0-100)	%
  				#"idx" : "3", "Name" : "Alerte",  "Level" : 0,  "SwitchType" : "Dimmer",  "Status" : "Off","LastUpdate" : "2014-03-18 22:17:18"
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDimmer", "room" => "Switches", params =>[]};
  
  				push (@{$feeds->{'params'}}, {"key" => "Status", "value" =>"$rbl"} );
  				push (@{$feeds->{'params'}}, {"key" => "Level", "value" => $f->{"Level"} } );
  
  				push (@{$feed->{'devices'}}, $feeds );
  			} elsif ($f->{"SwitchType"} eq "Motion Sensor") {
  				#DevMotion	Motion security sensor
  				#Status	Current status : 1 = On / 0 = Off	N/A
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevMotion", "room" => "Switches", params =>[]};
  				push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  				push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  				push (@{$feed->{'devices'}}, $feeds );
  			} elsif ($f->{"SwitchType"} eq "Door Lock") {
  				#DevLock	Door / window lock
  				#Status	Current status : 1 = On / 0 = Off	N/A
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevDoor", "room" => "Switches", params =>[]};
  				push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  				push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  				push (@{$feed->{'devices'}}, $feeds );
  			}elsif ($f->{"SwitchType"} eq "Smoke Detector") {
  				#DevSmoke	Smoke security sensor
  				#Armable	Ability to arm the device : 1 = Yes / 0 = No	N/A
  				#Ackable	Ability to acknowledge alerts : 1 = Yes / 0 = No	N/A
  				#Armed	Current arming status : 1 = On / 0 = Off	N/A
  				#Tripped	Is the sensor tripped ? (0 = No - 1 = Tripped)	N/A				
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevSmoke", "room" => "Switches", params =>[]};
  				push (@{$feeds->{'params'}}, { "key" => "Armable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Ackable", "value" => "0" } );
  				push (@{$feeds->{'params'}}, { "key" => "Armed", "value" => "1" } );
  				push (@{$feeds->{'params'}}, { "key" => "Tripped", "value" => $rbl });
  				push (@{$feed->{'devices'}}, $feeds );				
  			}
  			#DevDoor	Door / window security sensor
  			#DevFlood	Flood security sensor
  			#DevCO2Alert	CO2 Alert sensor	
  		} else {
  			if ($f->{"Type"} eq "Energy") {
  				#DevElectricity Electricity consumption sensor
  				#Watts  Current consumption     Watt
  				#ConsoTotal     Current total consumption       kWh
  				#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  				my ($usage)= ($f->{"Usage"} =~ /(\d+) Watt/);
  				my ($total)= ($f->{"Data"} =~ /(\d+).\d+ kWh/);
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevElectricity", "room" => "Utility", params =>[]};
  				push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$usage, "unit" => "W"} );
  				 push (@{$feeds->{'params'}}, {"key" => "ConsoTotal", "value" =>$total, "unit" => "kWh"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			} elsif ($f->{"Type"} eq "Current/Energy") {
  				#DevElectricity Electricity consumption sensor
  				#Watts  Current consumption     Watt
  				#ConsoTotal     Current total consumption       kWh
  				#"Type" : "Energy", "SubType" : "CM180", "Usage" : "408 Watt", "Data" : "187.054 kWh"
  				my ($L1,$L2,$L3,$tot)= split(/,/,$f->{"Data"});
  				my ($l1)= ($L1 =~ /(\d+) Watt/);
  				my ($l2)= ($L2 =~ /(\d+) Watt/);
  				my ($l3)= ($L3 =~ /(\d+) Watt/);
  				if ($l1) {	
  					my $feeds={"id" => $f->{"idx"}."_L1", "name" => $name." L1", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  					push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$l1, "unit" => "W"} );
  					push (@{$feed->{'devices'}}, $feeds );
  				}
  				if ($l2) {	
  					my $feeds={"id" => $f->{"idx"}."_L2", "name" => $name." L2", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  					push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$l2, "unit" => "W"} );
  					push (@{$feed->{'devices'}}, $feeds );
  				}
  				if ($l3) {	
  					my $feeds={"id" => $f->{"idx"}."_L3", "name" => $name." L3", "type" => "DevElectricity", "room" => "Utility", params =>[]};
  					push (@{$feeds->{'params'}}, {"key" => "Watts", "value" =>$l3, "unit" => "W"} );
  					push (@{$feed->{'devices'}}, $feeds );
  				}
  			}  elsif (($f->{"Type"} =~ "Temp")||($f->{"Type"} =~ "Humidity"))  {
  				my @type=split(/ \+ /,$f->{"Type"});
  				my $cnt;
  				foreach my $curs (@type) {
  					$cnt++;
  					if ($curs eq "Temp") {
  						#DevTemperature Temperature sensor
  						#Value  Current temperature     °C
  						#"Temp" : 21.50,  "Type" : "Temp + Humidity" / Type" : "Temp",
  
  						my $feeds={params =>[],"room" => "Temp","type" => "DevTemperature","name" => $name, "id" => $f->{"idx"}."_".$cnt};
  						my $v=$f->{"Temp"};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "°C"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($curs eq "Humidity") {
  						#DevHygrometry  Hygro sensor
  						#Value  Current hygro value     %
  						# "Humidity" : 52  "Type" : "Temp + Humidity" / Type" : "Humidity",
  
  						my $feeds={"id" => $f->{"idx"}."_".$cnt, "name" => $name, "type" => "DevHygrometry", "room" => "Temp", params =>[]};
  						my $v=$f->{"Humidity"};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "%"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					} elsif ($curs eq "Baro") {
  						#DevPressure    Pressure sensor
  						#Value  Current pressure        mbar
  						#"Barometer" : 1022, "Type" : "Temp + Humidity + Baro"
  						my $feeds={"id" => $f->{"idx"}."_".$cnt, "name" => $name, "type" => "DevPressure", "room" => "Temp", params =>[]};
  						my $v=$f->{"Barometer"};
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v", "unit" => "mbar"} );
  						push (@{$feed->{'devices'}}, $feeds );
  					}
  				}
  			}  elsif ($f->{"Type"} eq "Rain")  {
  				#DevRain        Rain sensor
  				#Value  Current instant rain value      mm/h
  				#Accumulation   Total rain accumulation mm
  				#"Rain" : "0.0", "RainRate" : "0.0", "Type" : "Rain"
  						my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevRain", "room" => "Temp", params =>[]};
  						my $v0=$f->{"RainRate"};
  						my $v1=$f->{"Rain"};
  						push (@{$feeds->{'params'}}, {"key" => "Accumulation", "value" => "$v1", "unit" => "mm"} );
  						push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v0", "unit" => "mm/h"} );
  						push (@{$feed->{'devices'}}, $feeds );
  			} elsif ($f->{"Type"} eq "UV")  {
  				#DevUV  UV sensor
  				#Value  Current UV index        index
  				# "Type" : "UV","UVI" : "6.0"
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevUV", "room" => "Temp", params =>[]};
  				my $v=$f->{"UVI"};
  				push (@{$feeds->{'params'}}, {"key" => "Value", "value" => "$v"} );
  				push (@{$feed->{'devices'}}, $feeds );
  			}
  
  		}
  
  
  	}; 
  	#Get Scenes
  	$system_url=config->{domo_path}."/json.htm?type=scenes";
  	$json = $ua->get( $system_url );
  	warn "Could not get $system_url!" unless defined $json;
  	if ($json) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(0)->decode( $json->decoded_content );
  		@results = @{ $decoded->{'result'} };
  		foreach my $f ( @results ) {
  				my $dt = Time::Piece->strptime($f->{"LastUpdate"},"%Y-%m-%d %H:%M:%S");
  #	debug($dt->strftime("%Y-%m-%d %H:%M:%S"));
  				my $name=$f->{"Name"};
  				$name=~s/\s/_/;
  				$name=~s/\s/_/;
  				$name=~s/\//_/;
  				$name=~s/%/P/;
  				#DevScene       Scene (launchable)
  				#LastRun        Date of last run        N/A
  				#"idx" : "3", "Name" : "Alerte", "Type" : "Scenes", "LastUpdate" : "2014-03-18 22:17:18"
  				my $feeds={"id" => $f->{"idx"}, "name" => $name, "type" => "DevScene", "room" => "Scenes", params =>[]};
  				my $v=$dt->strftime("%Y-%m-%d %H:%M:%S");
  				push (@{$feeds->{'params'}}, {"key" => "LastRun", "value" => "$v"} );
  				push (@{$feed->{'devices'}}, $feeds );
  		}
  	}
  	#Get Camera
  	$system_url=config->{domo_path}."/json.htm?type=cameras";
  debug($system_url);
  	$json = $ua->get( $system_url );
  	warn "Could not get $system_url!" unless defined $json;
  	if ($json) {
  		# Decode the entire JSON
  		$decoded = JSON->new->utf8(0)->decode( $json->decoded_content );
  		@results = @{ $decoded->{'result'} };
  		foreach my $f ( @results ) {
  				my $name=$f->{"Name"};
  				$name=~s/\s/_/;
  				$name=~s/\s/_/;
  				$name=~s/\//_/;
  				$name=~s/%/P/;
  				my $feeds={"id" => $f->{"idx"}."_cam", "name" => $name, "type" => "DevCamera", "room" => "Switches", params =>[]};
  				my $v=$f->{"ImageURL"};
  				push (@{$feeds->{'params'}}, {"key" => "localjpegurl", "value" => "$v"} );
  #				push (@{$feeds->{'params'}}, {"key" => "remotejpegurl", "value" => "$v"} );
  				push (@{$feed->{'devices'}}, $feeds );
  		}
  	}
  	#DevGenericSensor      Generic sensor (any value)
  	#Value  Current value   N/A
  
  
  
  	return($feed);
  	return { success => true};
  };
  
  sub connect_usb {
  	my $port=$_[0];
  	Device::SerialPort->new($port, 1) || die "Can't open $port: $ +!"; 
  	$ob = Device::SerialPort->new($port, 1) || die "Can't open $port: $ +!";
  	$ob->databits(8);
  	$ob->baudrate(115200);
  	$ob->parity("none");
  	$ob->stopbits(1);
  	$ob->buffers( 4096, 4096 );
  	$ob->write_settings();
  	return $ob;
  }
  
    sub connect_db {
      my $dbh = DBI->connect("dbi:SQLite:dbname=".setting('database')."?cache=shared", 
  	    "",                          
  	    "",                          
  	    { RaiseError => 1 }
  	) or die $DBI::errstr;
  
      return $dbh;
    }
  
    sub init_db {
      my $db = connect_db();
      my $schema = read_file('./schema.sql');
      $db->do($schema) or die $db->errstr;
    }
  
  init_db();  
  true;
MYSENSORS

$fatpacked{"MySensorsMSG.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'MYSENSORSMSG';
  # MySensors Gateway Plugin
  # 
  # Created by epierre <epierre@e-nef.com>
  #
  # http://www.mysensors.org
  # https://github.com/empierre/arduino/
  #
  # See github for contributors
  #	
  # This program is free software; you can redistribute it and/or
  # modify it under the terms of the GNU General Public License
  # version 2 as published by the Free Software Foundation.
  package MySensorsMSG;
  use utf8;
  use Time::Piece;
  use Device::SerialPort;
  use File::Slurp;
  use IO::Handle;
  use feature     qw< unicode_strings >;
  use constant {
  	VERSION 	=> '0.2',
  	PLUGIN_NAME 	=> "MySensors Gateway Plugin",
  	PLUGIN_VERSION 	=> "1.4b1",
  	MAX_RADIO_ID	=>255,
  	NODE_CHILD_ID	=>"255",
  	BAUD_RATE 	=> "115200",
  	ARDUINO_SID 	=> "urn:upnp-arduino-cc:serviceId:arduino1",
  	VARIABLE_CONTAINER_SID => "urn:upnp-org:serviceId:VContainer1"
  };
  my $inclusionResult = {};
  my $includeCount = 0;
  #Variables in msgw can be overridded in config file
  my $InclusionMode = 0;
  my $unit = "M";
  	
  #defines
  my %msgType = (
          'PRESENTATION' => "0",
          'SET_VARIABLE' => "1",
          'REQ_VARIABLE' => "2",
  	'ACK_VARIABLE' => "3",
          'INTERNAL'     => "4",
  	'STREAMING'    => "5" );
  
  my %tDeviceLookupNumType;
  my %tDeviceTypes = (
  	'DOOR' 	=> [0, "urn:schemas-micasaverde-com:device:DoorSensor:1", "D_DoorSensor1.xml", "Door "],
  	'MOTION' 	=> [1, "urn:schemas-micasaverde-com:device:MotionSensor:1", "D_MotionSensor1.xml", "Motion "],
  	SMOKE 	=> [2, "urn:schemas-micasaverde-com:device:SmokeSensor:1", "D_SmokeSensor1.xml", "Smoke "],
  	LIGHT 	=> [3, "urn:schemas-upnp-org:device:BinaryLight:1", "D_BinaryLight1.xml", "Light "],
  	DIMMER 	=> [4, "urn:schemas-upnp-org:device:DimmableLight:1", "D_DimmableLight1.xml", "Dim Light "],
  	COVER 	=> [5, "urn:schemas-micasaverde-com:device:WindowCovering:1", "D_WindowCovering1.xml", "Win Covering "] ,
  	TEMP 	=> [6, "urn:schemas-micasaverde-com:device:TemperatureSensor:1", "D_TemperatureSensor1.xml", "Temp "],
  	HUM 	=> [7, "urn:schemas-micasaverde-com:device:HumiditySensor:1", "D_HumiditySensor1.xml", "Humidity "],
  	BARO 	=> [8, "urn:schemas-micasaverde-com:device:BarometerSensor:1", "D_BarometerSensor1.xml", "Baro "],
  	WIND 	=> [9, "urn:schemas-micasaverde-com:device:WindSensor:1", "D_WindSensor1.xml", "Wind "],
  	RAIN 	=> [10, "urn:schemas-micasaverde-com:device:RainSensor:1", "D_RainSensor1.xml", "Rain "],
  	UV 	=> [11, "urn:schemas-micasaverde-com:device:UvSensor:1", "D_UvSensor1.xml", "UV "],
  	WEIGHT 	=> [12, "urn:schemas-micasaverde-com:device:ScaleSensor:1", "D_ScaleSensor1.xml", "Weight "],
  	POWER 	=> [13, "urn:schemas-micasaverde-com:device:PowerMeter:1", "D_PowerMeter1.xml", "Power "],
  	HEATER 	=> [14, "urn:schemas-upnp-org:device:Heater:1", "D_Heater1.xml", "Heater "],
  	DISTANCE => [15, "urn:schemas-upnp-org:device:Distance:1", "D_DistanceSensor1.xml", "Distance "],
  	LIGHT_LEVEL => [16, "urn:schemas-micasaverde-com:device:LightSensor:1", "D_LightSensor1.xml", "Light "],
  	ARDUINO_NODE => [17, "urn:schemas-arduino-cc:device:arduinonode:1", "D_ArduinoNode1.xml", "Node "],
  	ARDUINO_RELAY => [18, "urn:schemas-arduino-cc:device:arduinorelay:1", "D_ArduinoRelay1.xml", "Relay "],
  	LOCK 	=> [19, "urn:micasaverde-com:serviceId:DoorLock1", "D_DoorLock1.xml", "Lock "],
  	IR 	=> [20, "urn:schemas-arduino-cc:device:ArduinoIr:1", "D_ArduinoIr1.xml", "IR "],
  	WATER 	=> [21, "urn:schemas-micasaverde-com:device:WaterMeter:1", "D_WaterMeter1.xml", "Water "]
  );
  
  my %tVarLookupNumType;
  my %tVarTypes =(
  	TEMP 	=> [0, "urn:upnp-org:serviceId:TemperatureSensor1", "CurrentTemperature", ""],
  	HUM 	=> [1, "urn:micasaverde-com:serviceId:HumiditySensor1", "CurrentLevel", ""],
  	LIGHT 	=> [2, "urn:upnp-org:serviceId:SwitchPower1", "Status", "0"] ,
  	DIMMER 	=> [3, "urn:upnp-org:serviceId:Dimming1", "LoadLevelStatus", ""],
  	PRESSURE => [4, "urn:upnp-org:serviceId:BarometerSensor1", "CurrentPressure", ""],
  	FORECAST => [5, "urn:upnp-org:serviceId:BarometerSensor1", "Forecast", ""],
  	RAIN 	=> [6, "urn:upnp-org:serviceId:RainSensor1", "CurrentTRain", ""],
  	RAINRATE => [7, "urn:upnp-org:serviceId:RainSensor1", "CurrentRain", ""],
  	WIND 	=> [8, "urn:upnp-org:serviceId:WindSensor1", "AvgSpeed", ""],
  	GUST 	=> [9, "urn:upnp-org:serviceId:WindSensor1", "GustSpeed", ""],
  	DIRECTION => [10, "urn:upnp-org:serviceId:WindSensor1", "Direction", ""],
  	UV 	=> [11, "urn:upnp-org:serviceId:UvSensor1", "CurrentLevel", ""],
  	WEIGHT 	=> [12, "urn:micasaverde-com:serviceId:ScaleSensor1", "Weight", ""],
  	DISTANCE => [13, "urn:micasaverde-com:serviceId:DistanceSensor1", "CurrentDistance", ""],
  	IMPEDANCE => [14, "urn:micasaverde-com:serviceId:ScaleSensor1", "Impedance", ""],
  	ARMED 	=> [15, "urn:micasaverde-com:serviceId:SecuritySensor1", "Armed", ""],
  	TRIPPED => [16, "urn:micasaverde-com:serviceId:SecuritySensor1", "Tripped", "0"] ,
  	WATT 	=> [17, "urn:micasaverde-com:serviceId:EnergyMetering1", "Watts", ""],
  	KWH 	=> [18, "urn:micasaverde-com:serviceId:EnergyMetering1", "KWH", "0"],
  	SCENE_ON => [19, "urn:micasaverde-com:serviceId:SceneController1", "sl_SceneActivated", ""],
  	SCENE_OFF => [20, "urn:micasaverde-com:serviceId:SceneController1", "sl_SceneDeactivated", ""],
  	HEATER 	=> [21, "urn:upnp-org:serviceId:HVAC_UserOperatingMode1", "ModeStatus", ""],
  	HEATER_SW => [22, "urn:upnp-org:serviceId:SwitchPower1", "Status", ""],
  	LIGHT_LEVEL => [23, "urn:micasaverde-com:serviceId:LightSensor1", "CurrentLevel", ""],
  	VAR_1 	=> [24, "urn:upnp-org:serviceId:VContainer1", "Variable1", ""],
  	VAR_2 	=> [25, "urn:upnp-org:serviceId:VContainer1", "Variable2", ""],
  	VAR_3 	=> [26, "urn:upnp-org:serviceId:VContainer1", "Variable3", ""],
  	VAR_4 	=> [27, "urn:upnp-org:serviceId:VContainer1", "Variable4", ""],
  	VAR_5 	=> [28, "urn:upnp-org:serviceId:VContainer1", "Variable5", ""],
  	UP 	=> [29,'','', ""],
  	DOWN 	=> [30,'','', ""],
  	STOP 	=> [31,'','', ""],
  	IR_SEND => [32,'','', ""],
  	IR_RECEIVE => [33, "urn:upnp-org:serviceId:ArduinoIr1", "IrCode", ""],
  	FLOW 	=> [34, "urn:micasaverde-com:serviceId:WaterMetering1", "Flow", ""],
  	VOLUME 	=> [35, "urn:micasaverde-com:serviceId:WaterMetering1", "Volume", "0"],
  	LOCK 	=> [36, "urn:micasaverde-com:serviceId:DoorLock1", "Status", ""]
  );
  my %tInternalLookupNumType;
  my %tInternalTypes = (
  	BATTERY_LEVEL => [0, "urn:micasaverde-com:serviceId:HaDevice1", "BatteryLevel", ""],
  	BATTERY_DATE  => [1, "urn:micasaverde-com:serviceId:HaDevice1", "BatteryDate", ""],
  	'LAST_TRIP'     => [2, "urn:micasaverde-com:serviceId:SecuritySensor1", "LastTrip", ""],
  	TIME 	      => [3,'','',''],
  	VERSION       => [4, "urn:upnp-arduino-cc:serviceId:arduinonode1", "ArduinoLibVersion", ""],
  	REQUEST_ID    => [5,'','',''],
  	INCLUSION_MODE =>[6, "urn:upnp-arduino-cc:serviceId:arduino1", "InclusionMode", "0"],
  	RELAY_NODE    => [7, "urn:upnp-arduino-cc:serviceId:arduinonode1", "RelayNode", ""],
  	LAST_UPDATE   => [8, "urn:micasaverde-com:serviceId:HaDevice1", "LastUpdate", ""],
  	PING 	      => [9,'','',''],
  	PING_ACK      => [10,'','',''],
  	LOG_MESSAGE   => [11,'','',''],
  	CHILDREN      => [12, "urn:upnp-arduino-cc:serviceId:arduinonode1", "Children", "0"],
  	UNIT          =>	[13, "urn:upnp-arduino-cc:serviceId:arduino1", "Unit", "M"], # M = Metric / I = Imperial
  	SKETCH_NAME   => [14, "urn:upnp-arduino-cc:serviceId:arduinonode1", "SketchName", ""],
  	SKETCH_VERSION => [15, "urn:upnp-arduino-cc:serviceId:arduinonode1", "SketchVersion", ""]
  );
  
  #lookup tables
  my %childIdLookupTable;
  my %availableIds;for (my $i=0;$i<254;$i++) {$availableIds[$i]=1;};
  
  while (my ($k, $v) = each %tVarTypes) {
  	$tVarLookupNumType[$v->[0]] = $k;
  }
  while (my ($k, $v) = each %tDeviceTypes) {
  	$tVarLookupNumType[$v->[0]] = $k;
  }
  while (my ($k, $v) = each %tInternalTypes) {
  	$tInternalLookupNumType[$v->[0]] = $k;
  }
  
  
  sub log {
  	my ($text,$level)=@_;
      if (! $text) {
  		print STDERR "Arduino: nil-value";
  	}else{
  		print STDERR "Arduino: $text";
  	}
  }
  sub insert_variable {
  	my $stmt = qq(INSERT INTO variable (id,type,subtype,value)
  	      VALUES ($_[0], $_[1], $_[2], $[3] ));
  	my $rv = $dbh->do($stmt) or die $DBI::errstr;
  	$sth->finish();
  }
  sub update_variable {
  	my $stmt = qq(UPDATE variable set value=$_[3] where id=$_[0] and type=$_[1] and subtype=$_[2] );
  	my $rv = $dbh->do($stmt) or die $DBI::errstr;
  	$sth->finish();
  }
  
  sub variable_set {
  my ($serviceId, $name, $deviceId, $variable)=@_;
  	my $sth = $dbh->prepare( "SELECT value FROM variable WHERE id=$deviceId AND type=$serviceId AND subtype=$name");
  	$sth->execute();
      my $row = $sth->fetch;
  	if (!$row) {
  		insert_variable($_[0],$_[1],$_[2]);
  	} else {
  		update_variable($_[0],$_[1],$_[2]); 
  	}
  }
  
  #
  # Update variable if changed
  # Return true if changed or false if no change
  #
  sub setVariableIfChanged {
  	my ($serviceId, $name, $value, $deviceId)=@_;
      &log($serviceId .",".$name.", ".$value.", ". $deviceId);
      my $curValue = &variable_get($serviceId, $name, $deviceId);
      if (($value ~= $curValue) or (! $curValue)) {
          &variable_set($serviceId, $name, $value, $deviceId);
          return true;        
      } else {
          return false;        
      }
  }
  
  sub variable_get {
  	my ($serviceId, $name, $deviceId)=@_;
  	my $sth = $dbh->prepare( "SELECT value FROM variable WHERE id=$deviceId AND type=$serviceId AND subtype=$name");
  	my($count) = $dbh->selectrow_array($sth);
      return $count;
  }
  
  sub setVariable {
  	my ($incomingData, $childId, $nodeId)=@_;
  	if ($childId){ 
  		# Set variable reported from a child sensor.
  		my $index = $incomingData->[3];
  		my $varType = $tVarLookupNumType[$index];
  		my $var = $tVarTypes[$varType];
  		my $value = $incomingData->[4];
  		if ($var->[2]) {
  			&log("setVariable: RadioId: "+$incomingData->[0]+" Sensor: "+$incomingData->[1]+" ChildId: "+$childId+" Type: " +$tVarLookupNumType[$index]+" reporting value: "+ $value);
  			&setVariableIfChanged($var->[2], $var->[3], $value, $childId);
  			# Handle special variables battery level and tripped which also
  			# should update other variables to os.time(). This part should be removed...
  			if (($varType eq "TRIPPED") and ($value eq "1")) {
  				my $variable = $tInternalTypes{'LAST_TRIP'};
  				&setVariableIfChanged($variable->[2], $variable->[3], time(), $childId);
  			} else {
  			 	my $variable = $tInternalTypes{'LAST_UPDATE'};
  				&setVariableIfChanged($variable->[2], $variable->[3], time(),$childId);
  			}
  		}
  	}
  }
  
  1;
MYSENSORSMSG

$fatpacked{"RFXNames.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'RFXNAMES';
  package RFXNames;
  
  #based on SDK version 8.03A
  
  use constant {
  	pTypeRecXmitMessage => 0x02
  	sTypeReceiverLockError => 0x00
  	sTypeTransmitterResponse => 0x01
  
  	#undecoded => types
  	pTypeUndecoded => 0x03
  	sTypeUac => 0x00
  	sTypeUarc => 0x01
  	sTypeUati => 0x02
  	sTypeUhideki => 0x03
  	sTypeUlacrosse => 0x04
  	sTypeUad => 0x05
  	sTypeUmertik => 0x06
  	sTypeUoregon1 => 0x07
  	sTypeUoregon2 => 0x08
  	sTypeUoregon3 => 0x09
  	sTypeUproguard => 0x0A
  	sTypeUvisonic => 0x0B
  	sTypeUnec => 0x0C
  	sTypeUfs20 => 0x0D
  	sTypeUrsl => 0x0E
  	sTypeUblinds => 0x0F
  	sTypeUrubicson => 0x10
  	sTypeUae => 0x11
  	sTypeUfineoffset => 0x12
  	sTypeUrgb => 0x13
  	sTypeUrfy => 0x14
  	sTypeUselectplus => 0x15
  
  	#types => for => Lighting
  	pTypeLighting1 => 0x10
  	sTypeX10 => 0x0
  	sTypeARC => 0x1
  	sTypeAB400D => 0x2
  	sTypeWaveman => 0x3
  	sTypeEMW200 => 0x4
  	sTypeIMPULS => 0x5
  	sTypeRisingSun => 0x6
  	sTypePhilips => 0x7
  	sTypeEnergenie => 0x8
  	sTypeEnergenie5 => 0x9
  	sTypeGDR2 => 0x0A
  
  	light1_sOff => 0x0
  	light1_sOn => 0x1
  	light1_sDim => 0x2
  	light1_sBright => 0x3
  	light1_sAllOff => 0x5
  	light1_sAllOn => 0x6
  	light1_sChime => 0x7
  
  	pTypeLighting2 => 0x11
  	sTypeAC => 0x0
  	sTypeHEU => 0x1
  	sTypeANSLUT => 0x2
  	sTypeKambrook => 0x03
  
  	light2_sOff => 0x0
  	light2_sOn => 0x1
  	light2_sSetLevel => 0x2
  	light2_sGroupOff => 0x3
  	light2_sGroupOn => 0x4
  	light2_sSetGroupLevel => 0x5
  
  	pTypeLighting3 => 0x12
  	sTypeKoppla => 0x0
  	light3_sBright => 0x0
  	light3_sDim => 0x8
  	light3_sOn => 0x10
  	light3_sLevel1 => 0x11
  	light3_sLevel2 => 0x12
  	light3_sLevel3 => 0x13
  	light3_sLevel4 => 0x14
  	light3_sLevel5 => 0x15
  	light3_sLevel6 => 0x16
  	light3_sLevel7 => 0x17
  	light3_sLevel8 => 0x18
  	light3_sLevel9 => 0x19
  	light3_sOff => 0x1A
  	light3_sProgram => 0x1B
  
  	pTypeLighting4 => 0x13
  	sTypePT2262 => 0x0
  
  	pTypeLighting5 => 0x14
  	sTypeLightwaveRF => 0x0
  	sTypeEMW100 => 0x1
  	sTypeBBSB => 0x2
  	sTypeMDREMOTE => 0x03
  	sTypeRSL => 0x04
  	sTypeLivolo => 0x05
  	sTypeTRC02 => 0x06
  	sTypeAoke => 0x07
  	sTypeTRC02_2 => 0x08
  	sTypeEurodomest => 0x09
  	sTypeLivoloAppliance => 0x0A
  
  	light5_sOff => 0x0
  	light5_sOn => 0x1
  	light5_sGroupOff => 0x2
  	light5_sLearn => 0x2
  	light5_sGroupOn => 0x3
  	light5_sMood1 => 0x3
  	light5_sMood2 => 0x4
  	light5_sMood3 => 0x5
  	light5_sMood4 => 0x6
  	light5_sMood5 => 0x7
  	light5_sUnlock => 0xA
  	light5_sLock => 0xB
  	light5_sAllLock => 0xC
  	light5_sClose => 0xD
  	light5_sStop => 0xE
  	light5_sOpen => 0xF
  	light5_sSetLevel => 0x10
  	light5_sColourPalette => 0x11
  	light5_sColourTone => 0x12
  	light5_sColourCycle => 0x13
  	light5_sPower => 0x0
  	light5_sLight => 0x1
  	light5_sBright => 0x2
  	light5_sDim => 0x3
  	light5_s100 => 0x4
  	light5_s50 => 0x5
  	light5_s25 => 0x6
  	light5_sModePlus => 0x7
  	light5_sSpeedMin => 0x8
  	light5_sSpeedPlus => 0x9
  	light5_sModeMin => 0xA
  	light5_sLivoloAllOff => 0x00
  	light5_sLivoloGang1Toggle => 0x01
  	light5_sLivoloGang2Toggle => 0x02	#dim+ => for => dimmer
  	light5_sLivoloGang3Toggle => 0x03	#dim- => for => dimmer
  	light5_sLivoloGang4Toggle => 0x04
  	light5_sLivoloGang5Toggle => 0x05
  	light5_sLivoloGang6Toggle => 0x06
  	light5_sLivoloGang7Toggle => 0x07
  	light5_sLivoloGang8Toggle => 0x08
  	light5_sLivoloGang9Toggle => 0x09
  	light5_sLivoloGang10Toggle => 0x0A
  	light5_sRGBoff => 0x00
  	light5_sRGBon => 0x01
  	light5_sRGBbright => 0x02
  	light5_sRGBdim => 0x03
  	light5_sRGBcolorplus => 0x04
  	light5_sRGBcolormin => 0x05
  
  	pTypeLighting6 => 0x15
  	sTypeBlyss => 0x0
  	light6_sOn => 0x0
  	light6_sOff => 0x1
  	light6_sGroupOn => 0x2
  	light6_sGroupOff => 0x3
  
  	pTypeChime => 0x16
  	sTypeByronSX => 0x0
  	sTypeByronMP001 => 0x1
  	sTypeSelectPlus => 0x2
  	sTypeSelectPlus3 => 0x3
  	sTypeEnvivo => 0x4
  	chime_sound0 => 0x1
  	chime_sound1 => 0x3
  	chime_sound2 => 0x5
  	chime_sound3 => 0x9
  	chime_sound4 => 0xD
  	chime_sound5 => 0xE
  	chime_sound6 => 0x6
  	chime_sound7 => 0x2
  
  	pTypeFan => 0x17
  	sTypeSiemensSF01 => 0x0
  	fan_sTimer => 0x1
  	fan_sMin => 0x2
  	fan_sLearn => 0x3
  	fan_sPlus => 0x4
  	fan_sConfirm => 0x5
  	fan_sLight => 0x6
  
  	#types => for => Curtain
  	pTypeCurtain => 0x18
  	sTypeHarrison => 0x0
  	curtain_sOpen => 0x0
  	curtain_sClose => 0x1
  	curtain_sStop => 0x2
  	curtain_sProgram => 0x3
  
  	#types => for => Blinds
  	pTypeBlinds => 0x19
  	sTypeBlindsT0 => 0x0	#RollerTrol, => Hasta => new
  	sTypeBlindsT1 => 0x1	#Hasta => old
  	sTypeBlindsT2 => 0x2	#A-OK => RF01
  	sTypeBlindsT3 => 0x3	#A-OK => AC114
  	sTypeBlindsT4 => 0x4	#RAEX => YR1326
  	sTypeBlindsT5 => 0x5	#Media => Mount
  	sTypeBlindsT6 => 0x6	#DC106, => YOOHA, => Rohrmotor24 => RMF
  	sTypeBlindsT7 => 0x7	#Forest
  	sTypeBlindsT8 => 0x8	#Chamberlain => CS4330CN
  	sTypeBlindsT9 => 0x9	#Sunpery
  	sTypeBlindsT10 => 0xA	#Dolat => DLM-1
  
  	blinds_sOpen => 0x0
  	blinds_sClose => 0x1
  	blinds_sStop => 0x2
  	blinds_sConfirm => 0x3
  	blinds_sLimit => 0x4
  	blinds_slowerLimit => 0x5
  	blinds_sDeleteLimits => 0x6
  	blinds_sChangeDirection => 0x7
  	blinds_sLeft => 0x8
  	blinds_sRight => 0x9
  	blinds_s9ChangeDirection => 0x6
  	blinds_s9ImA => = => 0x7
  	blinds_s9ImCenter => = => 0x8
  	blinds_s9ImB => = => 0x9
  	blinds_s9EraseCurrentCh => = => 0xA
  	blinds_s9EraseAllCh => = => 0xB
  	blinds_s10LearnMaster => = => 0x4
  	blinds_s10EraseCurrentCh => = => 0x5
  	blinds_s10ChangeDirection => = => 0x6
  
  	#types => for => RFY
  	pTypeRFY => 0x1A
  	sTypeRFY => 0x0	#RFY
  	sTypeRFYext => 0x1	#RFY => extended
  	rfy_sStop => 0x0
  	rfy_sUp => 0x1
  	rfy_sUpStop => 0x2
  	rfy_sDown => 0x3
  	rfy_sDownStop => 0x4
  	rfy_sUpDown => 0x5
  	rfy_sListRemotes => 0x6
  	rfy_sProgram => 0x7
  	rfy_s2SecProgram => 0x8
  	rfy_s7SecProgram => 0x9
  	rfy_s2SecStop => 0xA
  	rfy_s5SecStop => 0xB
  	rfy_s5SecUpDown => 0xC
  	rfy_sEraseThis => 0xD
  	rfy_sEraseAll => 0xE
  	rfy_s05SecUp => 0xF
  	rfy_s05SecDown => 0x10
  	rfy_s2SecUp => 0x11
  	rfy_s2SecDown => 0x12
  	rfy_sEnableSunWind => 0x13
  	rfy_sDisableSun => 0x14
  
  	#types => for => Security1
  	pTypeSecurity1 => 0x20
  	sTypeSecX10 => 0x0				#X10 => security
  	sTypeSecX10M => 0x1			#X10 => security => motion
  	sTypeSecX10R => 0x2			#X10 => security => remote
  	sTypeKD101 => 0x3				#KD101 => smoke => detector
  	sTypePowercodeSensor => 0x04	#Visonic => PowerCode => sensor => - => primary => contact
  	sTypePowercodeMotion => 0x05	#Visonic => PowerCode => motion
  	sTypeCodesecure => 0x06		#Visonic => CodeSecure
  	sTypePowercodeAux => 0x07		#Visonic => PowerCode => sensor => - => auxiliary => contact
  	sTypeMeiantech => 0x8			#Meiantech
  	sTypeSA30 => 0x9				#SA30 => smoke => detector
  
  	#status => security
  	sStatusNormal => 0x0
  	sStatusNormalDelayed => 0x1
  	sStatusAlarm => 0x2
  	sStatusAlarmDelayed => 0x3
  	sStatusMotion => 0x4
  	sStatusNoMotion => 0x5
  	sStatusPanic => 0x6
  	sStatusPanicOff => 0x7
  	sStatusIRbeam => 0x8
  	sStatusArmAway => 0x9
  	sStatusArmAwayDelayed => 0xA
  	sStatusArmHome => 0xB
  	sStatusArmHomeDelayed => 0xC
  	sStatusDisarm => 0xD
  	sStatusLightOff => 0x10
  	sStatusLightOn => 0x11
  	sStatusLight2Off => 0x12
  	sStatusLight2On => 0x13
  	sStatusDark => 0x14
  	sStatusLight => 0x15
  	sStatusBatLow => 0x16
  	sStatusPairKD101 => 0x17
  	sStatusNormalTamper => 0x80
  	sStatusNormalDelayedTamper => 0x81
  	sStatusAlarmTamper => 0x82
  	sStatusAlarmDelayedTamper => 0x83
  	sStatusMotionTamper => 0x84
  	sStatusNoMotionTamper => 0x85
  
  	#types => for => Security2
  	pTypeSecurity2 => 0x21
  	sTypeSec2Classic => 0x0
  
  	#types => for => Camera
  	pTypeCamera => 0x28
  	sTypeNinja => 0x0		#X10 => Ninja/Robocam
  	camera_sLeft => 0x0
  	camera_sRight => 0x1
  	camera_sUp => 0x2
  	camera_sDown => 0x3
  	camera_sPosition1 => 0x4
  	camera_sProgramPosition1 => 0x5
  	camera_sPosition2 => 0x6
  	camera_sProgramPosition2 => 0x7
  	camera_sPosition3 => 8
  	camera_sProgramPosition3 => 0x9
  	camera_sPosition4 => 0xA
  	camera_sProgramPosition4 => 0xB
  	camera_sCenter => 0xC
  	camera_sProgramCenterPosition => 0xD
  	camera_sSweep => 0xE
  	camera_sProgramSweep => 0xF
  
  	#types => for => Remotes
  	pTypeRemote => 0x30
  	sTypeATI => 0x0		#ATI => Remote => Wonder
  	sTypeATIplus => 0x1	#ATI => Remote => Wonder => Plus
  	sTypeMedion => 0x2		#Medion => Remote
  	sTypePCremote => 0x3	#PC => Remote
  	sTypeATIrw2 => 0x4		#ATI => Remote => Wonder => II
  
  	#types => for => Thermostat
  	pTypeThermostat1 => 0x40
  	sTypeDigimax => 0x0		#Digimax
  	sTypeDigimaxShort => 0x1	#Digimax => with => short => format
  	thermostat1_sNoStatus => 0x0
  	thermostat1_sDemand => 0x1
  	thermostat1_sNoDemand => 0x2
  	thermostat1_sInitializing => 0x3
  
  	pTypeThermostat2 => 0x41
  	sTypeHE105 => 0x0
  	sTypeRTS10 => 0x1
  	thermostat2_sOff => 0x0
  	thermostat2_sOn => 0x1
  	thermostat2_sProgram => 0x2
  
  	pTypeThermostat3 => 0x42
  	sTypeMertikG6RH4T1 => 0x0	#Mertik => G6R-H4T1
  	sTypeMertikG6RH4TB => 0x1	#Mertik => G6R-H4TB
  	sTypeMertikG6RH4TD => 0x2	#Mertik => G6R-H4TD
  	sTypeMertikG6RH4S => 0x3	#Mertik => G6R-H4S
  	thermostat3_sOff => 0x0
  	thermostat3_sOn => 0x1
  	thermostat3_sUp => 0x2
  	thermostat3_sDown => 0x3
  	thermostat3_sRunUp => 0x4
  	thermostat3_Off2nd => 0x4
  	thermostat3_sRunDown => 0x5
  	thermostat3_On2nd => 0x5
  	thermostat3_sStop => 0x6
  
  	#types => for => Radiator => valve
  	pTypeRadiator1 => 0x48
  	sTypeSmartwares => 0x0	#Homewizard => smartwares
  
  	Radiator1_sNight => 0x0
  	Radiator1_sDay => 0x1
  	Radiator1_sSetTemp => 0x2
  
  	#types => for => BBQ => temperature
  	pTypeBBQ => 0x4E
  	sTypeBBQ1 => 0x1 =>  => #Maverick => ET-732
  
  	#types => for => temperature+rain
  	pTypeTEMP_RAIN => 0x4F
  	sTypeTR1 => 0x1 =>  => #WS1200
  
  	#types => for => temperature
  	pTypeTEMP => 0x50
  	sTypeTEMP1 => 0x1 =>  => #THR128/138,THC138
  	sTypeTEMP2 => 0x2 =>  => #THC238/268,THN132,THWR288,THRN122,THN122,AW129/131
  	sTypeTEMP3 => 0x3 =>  => #THWR800
  	sTypeTEMP4 => 0x4	#RTHN318
  	sTypeTEMP5 => 0x5 =>  => #LaCrosse => TX3
  	sTypeTEMP6 => 0x6 =>  => #TS15C
  	sTypeTEMP7 => 0x7 =>  => #Viking => 02811,TSS330
  	sTypeTEMP8 => 0x8 =>  => #LaCrosse => WS2300
  	sTypeTEMP9 => 0x9 =>  => #RUBiCSON
  	sTypeTEMP10 => 0xA =>  => #TFA => 30.3133
  	sTypeTEMP11 => 0xB =>  => #WT0122
  
  	#types => for => humidity
  	pTypeHUM => 0x51
  	sTypeHUM1 => 0x1 =>  => #LaCrosse => TX3
  	sTypeHUM2 => 0x2 =>  => #LaCrosse => WS2300
  
  	#status => types => for => humidity
  	humstat_normal => 0x0
  	humstat_comfort => 0x1
  	humstat_dry => 0x2
  	humstat_wet => 0x3
  
  	#types => for => temperature+humidity
  	pTypeTEMP_HUM => 0x52
  	sTypeTH1 => 0x1 =>  => #THGN122/123,THGN132,THGR122/228/238/268
  	sTypeTH2 => 0x2 =>  => #THGR810,THGN800
  	sTypeTH3 => 0x3 =>  => #RTGR328
  	sTypeTH4 => 0x4 =>  => #THGR328
  	sTypeTH5 => 0x5 =>  => #WTGR800
  	sTypeTH6 => 0x6 =>  => #THGR918,THGRN228,THGN500
  	sTypeTH7 => 0x7 =>  => #TFA => TS34C, => Cresta
  	sTypeTH8 => 0x8 =>  => #WT450H
  	sTypeTH9 => 0x9 =>  => #Viking => 02035,02038 => (02035 => has => no => humidity), => TSS320
  	sTypeTH10 => 0xA =>  =>  => #Rubicson
  	sTypeTH11 => 0xB =>  =>  => #EW109
  	sTypeTH12 => 0xC =>  =>  => #Imagintronix
  	sTypeTH13 => 0xD =>  =>  => #Alecto => WS1700 => and => compatibles
  	sTypeTH14 => 0xE =>  =>  => #Alecto
  
  	#types => for => barometric
  	pTypeBARO => 0x53
  
  	#types => for => temperature+humidity+baro
  	pTypeTEMP_HUM_BARO => 0x54
  	sTypeTHB1 => 0x1 =>  =>  => #BTHR918,BTHGN129
  	sTypeTHB2 => 0x2 =>  =>  => #BTHR918N,BTHR968
  	baroForecastNoInfo => 0x00
  	baroForecastSunny => 0x01
  	baroForecastPartlyCloudy => 0x02
  	baroForecastCloudy => 0x03
  	baroForecastRain => 0x04
  
  	#types => for => rain
  	pTypeRAIN => 0x55
  	sTypeRAIN1 => 0x1 =>  =>  => #RGR126/682/918
  	sTypeRAIN2 => 0x2 =>  =>  => #PCR800
  	sTypeRAIN3 => 0x3 =>  =>  => #TFA
  	sTypeRAIN4 => 0x4 =>  =>  => #UPM
  	sTypeRAIN5 => 0x5 =>  =>  => #WS2300
  	sTypeRAIN6 => 0x6 =>  =>  => #TX5
  	sTypeRAIN7 => 0x7 =>  =>  => #Alecto
  
  	#types => for => wind
  	pTypeWIND => 0x56
  	sTypeWIND1 => 0x1 =>  =>  => #WTGR800
  	sTypeWIND2 => 0x2 =>  =>  => #WGR800
  	sTypeWIND3 => 0x3 =>  =>  => #STR918,WGR918
  	sTypeWIND4 => 0x4 =>  =>  => #TFA
  	sTypeWIND5 => 0x5 =>  =>  => #UPM
  	sTypeWIND6 => 0x6 =>  =>  => #WS2300
  	sTypeWIND7 => 0x7 =>  =>  => #Alecto => WS4500
  
  	#types => for => uv
  	pTypeUV => 0x57
  	sTypeUV1 => 0x1 =>  =>  => #UVN128,UV138
  	sTypeUV2 => 0x2 =>  =>  => #UVN800
  	sTypeUV3 => 0x3 =>  =>  => #TFA
  
  	#types => for => date => & => time
  	pTypeDT => 0x58
  	sTypeDT1 => 0x1 =>  =>  => #RTGR328N
  
  	#types => for => current
  	pTypeCURRENT => 0x59
  	sTypeELEC1 => 0x1 =>  =>  => #CM113,Electrisave
  
  	#types => for => energy
  	pTypeENERGY => 0x5A
  	sTypeELEC2 => 0x1 =>  =>  => #CM119/160
  	sTypeELEC3 => 0x2 =>  =>  => #CM180
  
  	#types => for => current-energy
  	pTypeCURRENTENERGY => 0x5B
  	sTypeELEC4 => 0x1 =>  =>  => #CM180i
  
  	#types => for => power
  	pTypePOWER => 0x5C
  	sTypeELEC5 => 0x1 =>  =>  => #revolt
  
  	#types => for => weight => scales
  	pTypeWEIGHT => 0x5D
  	sTypeWEIGHT1 => 0x1 =>  =>  => #BWR102
  	sTypeWEIGHT2 => 0x2 =>  =>  => #GR101
  
  	#types => for => gas
  	pTypeGAS => 0x5E
  
  	#types => for => water
  	pTypeWATER => 0x5F
  
  	#RFXSensor
  	pTypeRFXSensor => 0x70
  	sTypeRFXSensorTemp => 0x0
  	sTypeRFXSensorAD => 0x1
  	sTypeRFXSensorVolt => 0x2
  	sTypeRFXSensorMessage => 0x3
  
  	#RFXMeter
  	pTypeRFXMeter => 0x71
  	sTypeRFXMeterCount => 0x0
  	sTypeRFXMeterInterval => 0x1
  	sTypeRFXMeterCalib => 0x2
  	sTypeRFXMeterAddr => 0x3
  	sTypeRFXMeterCounterReset => 0x4
  	sTypeRFXMeterCounterSet => 0xB
  	sTypeRFXMeterSetInterval => 0xC
  	sTypeRFXMeterSetCalib => 0xD
  	sTypeRFXMeterSetAddr => 0xE
  	sTypeRFXMeterIdent => 0xF
  
  	#FS20
  	pTypeFS20 => 0x72
  	sTypeFS20 => 0x0
  	sTypeFHT8V => 0x1
  	sTypeFHT80 => 0x2
  };
  
  my %pType= {
  0	=>	{ pTypeInterfaceControl, "Interface Control", "unknown" },
  1	=>	{ pTypeInterfaceMessage, "Interface Message", "unknown" },
  2	=>	{ pTypeRecXmitMessage, "Receiver/Transmitter Message", "unknown" },
  3	=>	{ pTypeUndecoded, "Undecoded RF Message", "unknown" },
  4	=>	{ pTypeLighting1, "Lighting 1" , "lightbulb", },
  5	=>	{ pTypeLighting2, "Lighting 2" , "lightbulb", },
  6	=>	{ pTypeLighting3, "Lighting 3" , "lightbulb", },
  7	=>	{ pTypeLighting4, "Lighting 4" , "lightbulb", },
  8	=>	{ pTypeLighting5, "Lighting 5" , "lightbulb", },
  9	=>	{ pTypeLighting6, "Lighting 6" , "lightbulb", },
  10	=>	{ pTypeLimitlessLights, "Lighting Limitless/Applamp" , "lightbulb" },
  11	=>	{ pTypeCurtain, "Curtain" , "blinds" },
  12	=>	{ pTypeBlinds, "Blinds" , "blinds" },
  13	=>	{ pTypeSecurity1, "Security", "security" },
  14	=>	{ pTypeSecurity2, "Security", "security" },
  15	=>	{ pTypeCamera, "Camera", "unknown" },
  16	=>	{ pTypeRemote, "Remote & IR" , "unknown" },
  17	=>	{ pTypeThermostat1, "Thermostat 1" , "temperature" },
  18	=>	{ pTypeThermostat2, "Thermostat 2" , "temperature" },
  19	=>	{ pTypeThermostat3, "Thermostat 3" , "temperature" },
  20	=>	{ pTypeRadiator1, "Radiator 1", "temperature" },
  21	=>	{ pTypeTEMP, "Temp", "temperature" },
  22	=>	{ pTypeHUM, "Humidity" , "temperature" },
  23	=>	{ pTypeTEMP_HUM, "Temp + Humidity" , "temperature" },
  24	=>	{ pTypeBARO, "Barometric" , "temperature" },
  25	=>	{ pTypeTEMP_HUM_BARO, "Temp + Humidity + Baro" , "temperature" },
  26	=>	{ pTypeRAIN, "Rain" , "rain" },
  27	=>	{ pTypeWIND, "Wind" , "wind" },
  28	=>	{ pTypeUV, "UV" , "uv" },
  29	=>	{ pTypeDT, "Date/Time" , "unknown" },
  30	=>	{ pTypeCURRENT, "Current" , "current" },
  31	=>	{ pTypeENERGY, "Energy" , "current" },
  32	=>	{ pTypeCURRENTENERGY, "Current/Energy" , "current" },
  33	=>	{ pTypeGAS, "Gas" , "counter" },
  34	=>	{ pTypeWATER, "Water" , "counter" },
  35	=>	{ pTypeWEIGHT, "Weight" , "scale" },
  36	=>	{ pTypeRFXSensor, "RFXSensor" , "unknown" },
  37	=>	{ pTypeRFXMeter, "RFXMeter" , "counter" },
  38	=>	{ pTypeP1Power, "P1 Smart Meter" , "counter" },
  39	=>	{ pTypeP1Gas, "P1 Smart Meter" , "counter" },
  40	=>	{ pTypeYouLess, "YouLess Meter", "counter" },
  41	=>	{ pTypeFS20, "FS20" , "unknown" },
  42	=>	{ pTypeRego6XXTemp, "Temp" , "temperature" },
  43	=>	{ pTypeRego6XXValue, "Value" , "utility" },
  44	=>	{ pTypeAirQuality, "Air Quality" , "air" },
  45	=>	{ pTypeUsage, "Usage" , "current" },
  46	=>	{ pTypeTEMP_BARO, "Temp + Baro" , "temperature" },
  47	=>	{ pTypeLux, "Lux" , "lux" },
  48	=>	{ pTypeGeneral, "General" , "General" },
  49	=>	{ pTypeThermostat, "Thermostat" , "thermostat" },
  50	=>	{ pTypeTEMP_RAIN, "Temp + Rain" , "Temp + Rain" },
  51	=>	{ pTypeChime, "Chime" , "doorbell" },
  52	=>	{ pTypeBBQ, "BBQ Meter", "bbq" },
  53	=>	{ pTypePOWER, "Current/Energy" , "current" },
  54	=>	{ pTypeRFY, "RFY" , "blinds" },
  55	=>	{ pTypeEvohome, "Heating" , "evohome" },
  56	=>	{ pTypeEvohomeZone, "Heating" , "evohome" },
  57	=>	{ pTypeEvohomeWater, "Heating" , "evohome" },
  58	=>	{ pTypeEvohomeRelay, "Heating" , "evohome" },
  59	=>	{ pTypeGeneralSwitch, "Light/Switch", "lightbulb" },
  
  };
  
  my %sType = {
   sTypeTEMP1	=>	pTypeTEMP		,
   sTypeTEMP2	=>	pTypeTEMP		,
   sTypeTEMP3	=>	pTypeTEMP		,
   sTypeTEMP4	=>	pTypeTEMP		,
   sTypeTEMP5	=>	pTypeTEMP		,
   sTypeTEMP6	=>	pTypeTEMP		,
   sTypeTEMP7	=>	pTypeTEMP		,
   sTypeTEMP8	=>	pTypeTEMP		,
   sTypeTEMP9	=>	pTypeTEMP		,
   sTypeTEMP10	=>	pTypeTEMP		,
   sTypeTEMP11	=>	pTypeTEMP		,
   sTypeTEMP_SYSTEM	=>	pTypeTEMP		,
   sTypeHUM1	=>	pTypeHUM		,
   sTypeHUM2	=>	pTypeHUM		,
   sTypeTH1	=>	pTypeTEMP_HUM		,
   sTypeTH2	=>	pTypeTEMP_HUM		,
   sTypeTH3	=>	pTypeTEMP_HUM		,
   sTypeTH4	=>	pTypeTEMP_HUM		,
   sTypeTH5	=>	pTypeTEMP_HUM		,
   sTypeTH6	=>	pTypeTEMP_HUM		,
   sTypeTH7	=>	pTypeTEMP_HUM		,
   sTypeTH8	=>	pTypeTEMP_HUM		,
   sTypeTH9	=>	pTypeTEMP_HUM		,
   sTypeTH10	=>	pTypeTEMP_HUM		,
   sTypeTH11	=>	pTypeTEMP_HUM		,
   sTypeTH12	=>	pTypeTEMP_HUM		,
   sTypeTH_LC_TC	=>	pTypeTEMP_HUM		,
   sTypeTHB1	=>	pTypeTEMP_HUM_BARO		,
   sTypeTHB2	=>	pTypeTEMP_HUM_BARO		,
   sTypeTHBFloat	=>	pTypeTEMP_HUM_BARO		,
   sTypeRAIN1	=>	pTypeRAIN		,
   sTypeRAIN2	=>	pTypeRAIN		,
   sTypeRAIN3	=>	pTypeRAIN		,
   sTypeRAIN4	=>	pTypeRAIN		,
   sTypeRAIN5	=>	pTypeRAIN		,
   sTypeRAIN6	=>	pTypeRAIN		,
   sTypeRAINWU	=>	pTypeRAIN		,
   sTypeWIND1	=>	pTypeWIND		,
   sTypeWIND2	=>	pTypeWIND		,
   sTypeWIND3	=>	pTypeWIND		,
   sTypeWIND4	=>	pTypeWIND		,
   sTypeWIND5	=>	pTypeWIND		,
   sTypeWIND6	=>	pTypeWIND		,
   sTypeWIND7	=>	pTypeWIND		,
   sTypeWINDNoTemp	=>	pTypeWIND		,
   sTypeUV1	=>	pTypeUV		,
   sTypeUV2	=>	pTypeUV		,
   sTypeUV3	=>	pTypeUV		,
   sTypeX10	=>	pTypeLighting1		,
   sTypeARC	=>	pTypeLighting1		,
   sTypeAB400D	=>	pTypeLighting1		,
   sTypeWaveman	=>	pTypeLighting1		,
   sTypeEMW200	=>	pTypeLighting1		,
   sTypeIMPULS	=>	pTypeLighting1		,
   sTypeRisingSun	=>	pTypeLighting1		,
   sTypePhilips	=>	pTypeLighting1		,
   sTypeEnergenie	=>	pTypeLighting1		,
   sTypeEnergenie5	=>	pTypeLighting1		,
   sTypeGDR2	=>	pTypeLighting1		,
   sTypeAC	=>	pTypeLighting2		,
   sTypeHEU	=>	pTypeLighting2		,
   sTypeANSLUT	=>	pTypeLighting2		,
   sTypeZWaveSwitch	=>	pTypeLighting2		,
   sTypeKoppla	=>	pTypeLighting3		,
   sTypePT2262	=>	pTypeLighting4		,
   sTypeLightwaveRF	=>	pTypeLighting5		,
   sTypeEMW100	=>	pTypeLighting5		,
   sTypeBBSB	=>	pTypeLighting5		,
   sTypeMDREMOTE	=>	pTypeLighting5		,
   sTypeRSL	=>	pTypeLighting5		,
   sTypeLivolo	=>	pTypeLighting5		,
   sTypeTRC02	=>	pTypeLighting5		,
   sTypeTRC02_2	=>	pTypeLighting5		,
   sTypeAoke	=>	pTypeLighting5		,
   sTypeEurodomest	=>	pTypeLighting5		,
   sTypeLivoloAppliance	=>	pTypeLighting5		,
   sTypeBlyss	=>	pTypeLighting6		,
   sTypeHarrison	=>	pTypeCurtain		,
   sTypeBlindsT0	=>	pTypeBlinds		,
   sTypeBlindsT1	=>	pTypeBlinds		,
   sTypeBlindsT2	=>	pTypeBlinds		,
   sTypeBlindsT3	=>	pTypeBlinds		,
   sTypeBlindsT4	=>	pTypeBlinds		,
   sTypeBlindsT5	=>	pTypeBlinds		,
   sTypeBlindsT6	=>	pTypeBlinds		,
   sTypeBlindsT7	=>	pTypeBlinds		,
   sTypeBlindsT8	=>	pTypeBlinds		,
   sTypeBlindsT9	=>	pTypeBlinds		,
   sTypeBlindsT10	=>	pTypeBlinds		,
   sTypeSecX10	=>	pTypeSecurity1		,
   sTypeSecX10M	=>	pTypeSecurity1		,
   sTypeSecX10R	=>	pTypeSecurity1		,
   sTypeKD101	=>	pTypeSecurity1		,
   sTypePowercodeSensor	=>	pTypeSecurity1		,
   sTypePowercodeMotion	=>	pTypeSecurity1		,
   sTypeCodesecure	=>	pTypeSecurity1		,
   sTypePowercodeAux	=>	pTypeSecurity1		,
   sTypeMeiantech	=>	pTypeSecurity1		,
   sTypeSA30	=>	pTypeSecurity1		,
   sTypeDomoticzSecurity	=>	pTypeSecurity1		,
   sTypeSec2Classic	=>	pTypeSecurity2		,
   sTypeNinja	=>	pTypeCamera		,
   sTypeATI	=>	pTypeRemote		,
   sTypeATIplus	=>	pTypeRemote		,
   sTypeMedion	=>	pTypeRemote		,
   sTypePCremote	=>	pTypeRemote		,
   sTypeATIrw2	=>	pTypeRemote		,
   sTypeDigimax	=>	pTypeThermostat1		,
   sTypeDigimaxShort	=>	pTypeThermostat1		,
   sTypeHE105	=>	pTypeThermostat2		,
   sTypeRTS10	=>	pTypeThermostat2		,
   sTypeMertikG6RH4T1	=>	pTypeThermostat3		,
   sTypeMertikG6RH4TB	=>	pTypeThermostat3		,
   sTypeMertikG6RH4TD	=>	pTypeThermostat3		,
   sTypeMertikG6RH4S	=>	pTypeThermostat3		,
   sTypeSmartwares	=>	pTypeRadiator1		,
   sTypeSmartwaresSwitchRadiator	=>	pTypeRadiator1		,
   sTypeDT1	=>	pTypeDT		,
   sTypeELEC1	=>	pTypeCURRENT		,
   sTypeELEC2	=>	pTypeENERGY		,
   sTypeELEC3	=>	pTypeENERGY		,
   sTypeZWaveUsage	=>	pTypeENERGY		,
   sTypeELEC4	=>	pTypeCURRENTENERGY		,
   sTypeWEIGHT1	=>	pTypeWEIGHT		,
   sTypeWEIGHT2	=>	pTypeWEIGHT		,
   sTypeRFXSensorTemp	=>	pTypeRFXSensor		,
   sTypeRFXSensorAD	=>	pTypeRFXSensor		,
   sTypeRFXSensorVolt	=>	pTypeRFXSensor		,
   sTypeRFXMeterCount	=>	pTypeRFXMeter		,
   sTypeP1Power	=>	pTypeP1Power		,
   sTypeP1Gas	=>	pTypeP1Gas		,
   sTypeYouLess	=>	pTypeYouLess		,
   sTypeRego6XXTemp	=>	pTypeRego6XXTemp		,
   sTypeRego6XXStatus	=>	pTypeRego6XXValue		,
   sTypeRego6XXCounter	=>	pTypeRego6XXValue		,
   sTypeVoltcraft	=>	pTypeAirQuality		,
   sTypeElectric	=>	pTypeUsage		,
   sTypeBMP085	=>	pTypeTEMP_BARO		,
   sTypeLux	=>	pTypeLux		,
   sTypeVisibility	=>	pTypeGeneral		,
   sTypeSolarRadiation	=>	pTypeGeneral		,
   sTypeSoilMoisture	=>	pTypeGeneral		,
   sTypeLeafWetness	=>	pTypeGeneral		,
   sTypeSystemTemp	=>	pTypeGeneral		,
   sTypePercentage	=>	pTypeGeneral		,
   sTypeFan	=>	pTypeGeneral		,
   sTypeVoltage	=>	pTypeGeneral		,
   sTypeCurrent	=>	pTypeGeneral		,
   sTypePressure	=>	pTypeGeneral		,
   sTypeBaro	=>	pTypeGeneral		,
   sTypeSetPoint	=>	pTypeGeneral		,
   sTypeTemperature	=>	pTypeGeneral		,
   sTypeZWaveClock	=>	pTypeGeneral		,
   sTypeTextStatus	=>	pTypeGeneral		,
   sTypeZWaveThermostatMode	=>	pTypeGeneral		,
   sTypeZWaveThermostatFanMode	=>	pTypeGeneral		,
   sTypeAlert	=>	pTypeGeneral		,
   sTypeSoundLevel	=>	pTypeGeneral		,
   sTypeDistance	=>	pTypeGeneral		,
   sTypeThermSetpoint	=>	pTypeThermostat		,
   sTypeThermTemperature	=>	pTypeThermostat		,
   sTypeByronSX	=>	pTypeChime		,
   sTypeByronMP001	=>	pTypeChime		,
   sTypeSelectPlus	=>	pTypeChime		,
   sTypeSelectPlus3	=>	pTypeChime		,
   sTypeEnvivo	=>	pTypeChime		,
   sTypeTR1	=>	pTypeTEMP_RAIN		,
   sTypeBBQ1	=>	pTypeBBQ		,
   sTypeELEC5	=>	pTypePOWER		,
   sTypeLimitlessRGBW	=>	pTypeLimitlessLights		,
   sTypeLimitlessRGB	=>	pTypeLimitlessLights		,
   sTypeLimitlessWhite	=>	pTypeLimitlessLights		,
   sTypeRFY	=>	pTypeRFY		,
   sTypeRFYext	=>	pTypeRFY		,
   sTypeEvohome	=>	pTypeEvohome		,
   sTypeEvohomeZone	=>	pTypeEvohomeZone		,
   sTypeEvohomeWater	=>	pTypeEvohomeWater		,
   sTypeEvohomeRelay	=>	pTypeEvohomeRelay		,
   sSwitchTypeX10	=>	pTypeGeneralSwitch		,
   sSwitchTypeARC	=>	pTypeGeneralSwitch		,
   sSwitchTypeAB400D	=>	pTypeGeneralSwitch		,
   sSwitchTypeWaveman	=>	pTypeGeneralSwitch		,
   sSwitchTypeEMW200	=>	pTypeGeneralSwitch		,
   sSwitchTypeIMPULS	=>	pTypeGeneralSwitch		,
   sSwitchTypeRisingSun	=>	pTypeGeneralSwitch		,
   sSwitchTypePhilips	=>	pTypeGeneralSwitch		,
   sSwitchTypeEnergenie	=>	pTypeGeneralSwitch		,
   sSwitchTypeEnergenie5	=>	pTypeGeneralSwitch		,
   sSwitchTypeGDR2	=>	pTypeGeneralSwitch		,
   sSwitchTypeAC	=>	pTypeGeneralSwitch		,
   sSwitchTypeHEU	=>	pTypeGeneralSwitch		,
   sSwitchTypeANSLUT	=>	pTypeGeneralSwitch		,
   sSwitchTypeKoppla	=>	pTypeGeneralSwitch		,
   sSwitchTypePT2262	=>	pTypeGeneralSwitch		,
   sSwitchTypeLightwaveRF	=>	pTypeGeneralSwitch		,
   sSwitchTypeEMW100	=>	pTypeGeneralSwitch		,
   sSwitchTypeBBSB	=>	pTypeGeneralSwitch		,
   sSwitchTypeMDREMOTE	=>	pTypeGeneralSwitch		,
   sSwitchTypeRSL	=>	pTypeGeneralSwitch		,
   sSwitchTypeLivolo	=>	pTypeGeneralSwitch		,
   sSwitchTypeTRC02	=>	pTypeGeneralSwitch		,
   sSwitchTypeTRC02_2	=>	pTypeGeneralSwitch		,
   sSwitchTypeAoke	=>	pTypeGeneralSwitch		,
   sSwitchTypeEurodomest	=>	pTypeGeneralSwitch		,
   sSwitchTypeLivoloAppliance	=>	pTypeGeneralSwitch		,
   sSwitchTypeBlyss	=>	pTypeGeneralSwitch		,
   sSwitchTypeByronSX	=>	pTypeGeneralSwitch		,
   sSwitchTypeByronMP001	=>	pTypeGeneralSwitch		,
   sSwitchTypeSelectPlus	=>	pTypeGeneralSwitch		,
   sSwitchTypeSelectPlus3	=>	pTypeGeneralSwitch		
  }
  
  true;
RFXNAMES

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
     if (my $fat = $_[0]{$_[1]}) {
       return sub {
         return 0 unless length $fat;
         $fat =~ s/^([^\n]*\n?)//;
         $_ = $1;
         return 1;
       };
     }
     return;
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE

#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";

use Domo2;
Domo2->to_app;
